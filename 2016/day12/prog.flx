// prog.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation

enum Op
{
	case MOV
	case INC
	case DEC
	case JMP
}

struct Instruction
{
	var opcode: Op
	var oper1: int		// a = 1000, b = 2000, c = 3000, d = 4000
	var oper2: int
}

public func main()
{
	let input = [
		"cpy 1 a",
		"cpy 1 b",
		"cpy 26 d",
		"jnz c 2",
		"jnz 1 5",
		"cpy 7 c",
		"inc d",
		"dec c",
		"jnz c -2",
		"cpy a c",
		"inc a",
		"dec b",
		"jnz b -2",
		"cpy c b",
		"dec d",
		"jnz d -6",
		"cpy 16 c",
		"cpy 17 d",
		"inc a",
		"dec d",
		"jnz d -2",
		"dec c",
		"jnz c -5"
	]


	var k = 0
	var instrs: Instruction[]
	while k < input.length
	{
		let s = input[k]

		var op: Op = Op.MOV
		let op1 = s.substringInRange(4, s.substring(4, -1).find(" ") + 4)
		var op2 = ""

		if s.find("cpy") == 0
		{
			op = Op.MOV
			op2 = s.substring(5 + op1.length, -1)
		}
		else if s.find("inc") == 0
		{
			op = Op.INC
		}
		else if s.find("dec") == 0
		{
			op = Op.DEC
		}
		else if s.find("jnz") == 0
		{
			op = Op.JMP
			op2 = s.substring(5 + op1.length, -1)
		}
		else
		{
			abort()
		}


		var o1 = 0
		var o2 = 0

		if op1 == "a"
		{
			o1 = 1000
		}
		else if op1 == "b"
		{
			o1 = 2000
		}
		else if op1 == "c"
		{
			o1 = 3000
		}
		else if op1 == "d"
		{
			o1 = 4000
		}
		else
		{
			o1 = parseNum(op1)
		}




		if op2 == "a"
		{
			o2 = 1000
		}
		else if op2 == "b"
		{
			o2 = 2000
		}
		else if op2 == "c"
		{
			o2 = 3000
		}
		else if op2 == "d"
		{
			o2 = 4000
		}
		else if op2 != ""
		{
			o2 = parseNum(op2)
		}


		instrs += Instruction(op, o1, o2)
		// printf("%d: (%s) %d, (%s) %d\n", op, op1, o1, op2, o2)

		k += 1
	}




	// execute
	k = 0
	var RegA = 0
	var RegB = 0
	var RegC = 1
	var RegD = 0

	loop
	{
		let op = instrs[k].opcode
		let o1 = instrs[k].oper1
		let o2 = instrs[k].oper2


		if op == Op.MOV
		{
			// copy
			// get source
			var inp = 0

			if o1 == 1000
			{
				inp = RegA
			}
			else if o1 == 2000
			{
				inp = RegB
			}
			else if o1 == 3000
			{
				inp = RegC
			}
			else if o1 == 4000
			{
				inp = RegD
			}
			else
			{
				inp = o1
			}



			// get out
			if o2 == 1000
			{
				RegA = inp
			}
			else if o2 == 2000
			{
				RegB = inp
			}
			else if o2 == 3000
			{
				RegC = inp
			}
			else if o2 == 4000
			{
				RegD = inp
			}
			else
			{
				printf("???\n")
				abort()
			}
		}
		else if op == Op.INC
		{
			if o1 == 1000
			{
				RegA += 1
			}
			else if o1 == 2000
			{
				RegB += 1
			}
			else if o1 == 3000
			{
				RegC += 1
			}
			else if o1 == 4000
			{
				RegD += 1
			}
			else
			{
				printf("???\n")
				abort()
			}
		}
		else if op == Op.DEC
		{
			if o1 == 1000
			{
				RegA -= 1
			}
			else if o1 == 2000
			{
				RegB -= 1
			}
			else if o1 == 3000
			{
				RegC -= 1
			}
			else if o1 == 4000
			{
				RegD -= 1
			}
			else
			{
				printf("???\n")
				abort()
			}
		}
		else if op == Op.JMP
		{
			var cond = 0
			if o1 == 1000
			{
				cond = RegA
			}
			else if o1 == 2000
			{
				cond = RegB
			}
			else if o1 == 3000
			{
				cond = RegC
			}
			else if o1 == 4000
			{
				cond = RegD
			}
			else
			{
				cond = o1
			}



			if cond != 0
			{
				// move by o2
				k += o2
				k -= 1
			}
		}
		else
		{
			abort()
		}

		k += 1
		if k >= instrs.length { break }
	}

	printf("%d, %d, %d, %d\n", RegA, RegB, RegC, RegD)
}






func parseNum(str: string) -> int
{
	var s = str

	if s.length == 0 { return 0 }
	else if s.length == 1 { return s[0] as int - 48 }

	var mul = 1
	if s[0] == char("-")
	{
		s = s.substring(1, -1)
		mul = -1
	}

	var ret = 0
	var i = s.length - 1
	var pos = 1

	while i >= 0
	{
		ret = pos * (s[i] as int - 48) + ret

		i -= 1
		pos *= 10
	}

	return ret * mul
}




