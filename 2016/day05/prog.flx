// prog.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.


import Foundation


// todo: wtf? memory ?????

public func main()
{
	let stderr = fdopen(2, "a")
	let input = "reyedfim"

	let part = 2

	if part == 1
	{
		var password = ""

		var k = 0
		while password.length < 8
		{
			let s = input + toString(k)
			let hash = MD5.hashString(s)

			if checkHash(hash)
			{
				password += hashToChar(hash[2])
			}

			fprintf(stderr, "\r(%-8s)", password)


			dealloc hash
			k += 1
		}

		printf("\npassword = %s\n", password)
	}
	else
	{
		var password: i8[9] = [ 95 as i8, 95, 95, 95, 95, 95, 95, 95, 0 ]


		var k = 0
		var filled = 0
		while filled < 8
		{
			let s = input + toString(k)
			let hash = MD5.hashString(s)

			if checkHash(hash)
			{
				let pos = hash[2] & 0x0F
				if pos < 8 && password[pos] == 95
				{
					let c: u8 = (hash[3] & 0xF0) >> 4
					password[pos] = hashToChar(c) as i8

					filled += 1
				}
			}

			fprintf(stderr, "\r(%-8s): %zd", password as i8*, k)


			dealloc hash
			k += 1
		}

		printf("\npassword = %s\n", password as i8*)
	}
}



func hashToChar(h: u8) -> char
{
	var c: u8 = h & 0x0F
	if c < 0xA { return c + char("0") }
	else { return c + char("a") - 0xA }
}

func checkHash(hash: u8[]) -> bool
{
	return (hash[0] == 0) && (hash[1] == 0) && (hash[2] & 0xF0 == 0)
}

func toString(n: int) -> string
{
	var ret = ""
	var num = n

	if num == 0 { return "0" }

	while num > 0
	{
		let d = num % 10
		let c = char(d as i8) + char("0")

		ret += c

		num /= 10
	}

	return reverse(ret)
}


func reverse(s: string) -> string
{
	var ret = ""
	var i = s.length - 1

	while i >= 0
	{
		ret += s[i]

		i -= 1
	}

	return ret
}




















