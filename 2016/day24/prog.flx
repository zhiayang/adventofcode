// prog.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation

namespace Q
{
	var input = [
		"#######################################################################################################################################################################################",
		"#...........#.....#...........#.#.......#.....#.#...............#.....#.....#.......#.......#.......#.....................#.........#.....#...#3......#...#.#.............#.......#...#",
		"#####.#.#.###.###.#####.#.#####.#.###.###.###.#.#.#.#.#.#.###.#.###.###.###.#.#######.#.#.#.###.###.#.#.#.#####.#.#.#####.###.#.#######.#############.#.#.#.#.#.#.###.#.#.#.#.###.#.#.#",
		"#...#.#.#.#.....#.#...#...#.....#.....#.#...#.........#.....................#.....#...#...#.......#.....#.#.........#.#.#.#.#.......................#...#...#.#.#.#.....#.#.........#.#",
		"#.#.#.#.#.#####.#.#.#.#.#.#.#.#.###.#.#.###.#.#.#.#.#.#########.#.###.###.#.#.###.###.#.#.#.#.###.#.#.#.#.#.#.#####.#.#.###.###.#######.#.#.#.###.#.###.#.#.#####.#####.#.#.###.#.#.#.#",
		"#.#.#...#.....#.#.....#...#.#...#.#...#.......#...........#...#...#...#.#.....#.#...#...........#.#.......#...#...#.#.........#...#.......#.#...#.....#...#.......#.#.#.............#.#",
		"#.#######.#.#.###.#.#.#####.#.#.#.#.###.#####.#.#.###.#.#.#.#.#.#.#.#.#.#.###.#.#.#.###.#######.#######.#.#.###.#.#.#.#.#.#.###.#.#.#.#.#.###.#.#####.#.#.#.#.#.#.#.#.#.###.#.#####.#.#",
		"#.#...#.....#.......#.......#.#.......#...#.#.....#.#.#.#.#.#.......#...#.....#.#.#.#.#.........#...#...#...#.......#...#...#.....#.....#...#.........#...#.#...#...#...#.........#.#.#",
		"#.#.#.#.###.###.#.#.#.###.###.#.#.###.#.#.#.#####.#.###.#.#####.#####.###.#.#.#.#.###.#.#.#.###.###.#.#.#.#.#.#####.#.###.#.#.###.#.#.#.#.###.###.#######.#.###.###.#.#######.#.#.#.#.#",
		"#.#...#...#...............#...#...#...#.#.........#.#...#...#.#...#.#.....#...#.#...#.#.#...#.#.#.#.#.....#...#...#.......#.#...#.........#.#.....#.#...#.....#.#...#.#2#.....#.......#",
		"#.#.#####.#########.#.###.#.#####.#.#.#.#######.#.###.#.#.#.#.###.#.#.###.#.###.#.#.#.#.#.###.###.#.#.#######.#.###.#.#.#.#.#.#.#.#####.###.#.###.#.#####.#.#.###.#.#.#.###.#.###.###.#",
		"#...#...........#.....#.......#...#0..........#...#.....#.#...#.#...#.#.#...#.#.......#.........#...#.#...#.#.#.......#...#.#.........#.#.....................#.#.#.#.....#.#.....#...#",
		"#.###.#.#.#.#.#.###.#.#.#.#.#.###.#.#.###.#.#.#.###.###.#.#####.#.#.#.#.###.#.#.###.#.#.###.###.#.#####.#.#.#.###.#.#######.#######.#.#.#.###.#.#.#.#.#.#######.#.#.#####.#.###.###.#.#",
		"#...#...#...#.#...........#...#.#.....#...#...#.....#.#.............#...#.........#...#.....#...#.......#...#.#.............#.........#...#.#.....#.#.........#.............#...#.....#",
		"#.#.#.###.#.###.#.#.#.###.#.###.#######.#.#.###.#.#.#.#.###.#.###.#.#.#.#.#####.#.#.#.#####.#.#####.#.#.#.#.###.###.#.###.###.###.#.#.#.###.#.#.###.#.#.###.#########.#####.#.#.#.#####",
		"#.#...#.#.......#...#.....#.....#...#...#.....#...#...#.........#.....#.#.........#.....#.....#.........#...#.#.....#.#...#...#.#.#...#.#...#.........#.#...#.........#.#.......#.....#",
		"#.#####.#.###.#.#.#.###.#.#.#.#.#.#.###.#.#.#.###.###.#.###.#.###.#.#.#.###.#.#####.###.#.#.#.#.#.#####.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.###.#.#.#",
		"#.....#...#...........#...#...........#.#.....#...#.....#...#.#.#.#...#.....#...#...#...............#...#.........#...#.....#...#.#...#.#...#.....#.....#.....#...#.#...#...#.#.......#",
		"###.###.#.#.#####.###.#####.#.###.#.#.#####.#.###.#.###.#.###.#.#.#.#.###.#.###.#.#.#.#.###.#.###.#.#.#.#.#.#.###.#.#.#.###.###.#.#.###.#########.#.#####.###########.#.###.###.#####.#",
		"#...#1#...#...#.......#...#...#.#...#...#...........#.#.......#.......#.#.........#.#...#...#...............#...#.....#.#...#.#.....#.........#...#.....#.#...#...#.....#.#.#.#...#...#",
		"#.###.###.#.#.#.#####.#.#.#.#.#.#.#####.#####.#.#####.#.#.#.#.###.#.#.#.###.#.###.#.###.#.#.#####.#.#.#####.#.#.###.#.###.#.#.#.#.#.#.#####.#.#.#.#.###.#.#.###.#.#.#.#.#.#.#.###.#.#.#",
		"#.....#.#.#.#.........#.#.#.....#.....#...#.....#...#.............#...#...#.....#...#.......#.......#.#.....#...#...#.#...#.....#.#...#.....#.#.#.#.#.#.#.......#...........#.#5#.....#",
		"#.###.#.#.###.###.###.#.#####.#.#.###.###.#.###.#############.#######.#.###.#.###.#.#####.#.#.#.#####.#.#.#####.#.#.#.#.#.#######.#.#.###########.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.###.#",
		"#.....#...#...................#.......#...#...#.#.....#.............#.....#...#.....#.......#.#.#.........#.........#.......#.......#...#.........#.#...#...#.....#.#.....#...#...#.#.#",
		"#.###.###.###########.###.#####.#####.###.#.#.#.#.#.#.###.#.###.#.#######.#.#.#.#.#.#.###.#.#.#####.#.#.#.#######.#.###.#.#.###.#.#.#.###.#####.#####.#.#.#.#.###.#.###.###########.#.#",
		"#.#.#.#...#...#.....#.....#.#.......#.....#.....#...........#.#...#.........#.#.#.#.....#.#.#...........#...#...#...#.......#...#.........#.....#.....#.....#.......#...#...#.#...#...#",
		"#.#.#.#.#.#########.#.#.###.#.#.###.###.#.#.#.###.#####.#.#.#.#.#.#.#######.#.#.#######.#.###.#.###.###.#.###.#.#.#.#######.#######.#.#.#.#####.#.###.#.#####.#.###.#.#.###.#.#######.#",
		"#.#...#...#.#...................#.#...#.#...#.......#.#...#.#...#.#.#.....#.#...#...#...#.#.............#.....#...........#.........#...#.#.#.....#.......#.......#.....#...#.#...#...#",
		"###.#.#.#.#.#.#.###.#.###.#####.#.#####.#.#.###.#.#.#.#####.#.###.#####.#.#.#.#.#.#.#.###.#.#.#####.###.#.###.#####.#.#.#.#####.###.#.#.#.#.#.#######.###.#.#.#########.###.#.#######.#",
		"#.....#...................#...#.#...#...#...........#.#.......#.#.....#.#.....#...........#.....#.........#.#...........#...#.....#...#.....#.............#.#.#.........#.#.#.#.......#",
		"#.#.#.#.#.###.#.#.#.#.#########.###.#.#.#.#########.#.#.#.#.#.#.###########.#.#.###.###.###.#.#.#.#.#.###.#.###.#.###.#.###.###.#.###.#.#.#####.#.#.#######.#.#.###.###.#.#.#.###.#####",
		"#...#.#.#....7#.#...#.#.........#.....#...#.#.......#.....#...........#.#...#.......#.#...#.#...#...........#...#.#...#.....#...#.#.#...........#...#.#...#...#4....#...#...#...#.....#",
		"###.#.#.###.#####.#.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#######.#.#.###.#.#####.#.#####.###.#.###.#.#.#.#.#####.###.#.###.#.#.#.#.###.#.#.###.#.#.###.#.###.#########.#.###.#.#.#.#.#.#.#",
		"#.....#.#.#.......#.#.#.......#.#.#.............#...#.........#.......#.#.#...........#.....#.....#...#...#.#.....#...#.....#.#.#...#...#...#.....#...#...#.#...#...#.#.#.....#...#.#.#",
		"#.###.#.#.#########.#.#.#.#######.#.#.#.#.###.###.#####.#.#.#.#.#.###.#.#.#.#.#####.#.#.###.#.#.#.#.###.###.###.#.#.#######.#.#.###.#####.#.#.###.#.#.#####.###.#.#.###.#.#########.###",
		"#.......#...#...#...#...#.#...#...#.#.#...#.#...........#.........#...#.#.#.#.....#...#.....#.#.....#...#...#...#.#.#.#...#...#.#...#.....#...........#.#.........#.....#.#.#...#.....#",
		"#####.###.#####.#.#####.#######.#.#.#.###.#.#######.###.#####.###.#.#.#.#.#.#####.#####.###.###.###.#.#.###.#.#.#.###.#.#.###.#.#.#####.#.###.#.#.#.###.#.#.#.#.#.###.###.#.#.###.#.#.#",
		"#.....#.#.#.......#...#.#.#.....#.........#...#.....#6......#...#.#...........#.......#.............#...#...#...#...#.#...#...#...#.....#.........#.#...#.....#.#.#.......#...#.#.#...#",
		"#######################################################################################################################################################################################"
	]

	var start: Node
	var goals: (char, int, int)[]
}

public func main()
{
	// formatting fucks up
	// each string is a row.

	var goals: (char, int, int)[]
	var y = 0
	while y < Q.input.length
	{
		var x = 0
		while x < Q.input[y].length
		{
			if Q.input[y][x] == char("0")
			{
				Q.start = Node(x, y)
			}
			else if Q.input[y][x] != char("#") && Q.input[y][x] != char(".")
			{
				Q.goals += (Q.input[y][x], x, y)
			}

			x += 1
		}
		y += 1
	}


	// find all pairs -- should have 28 (8C2)
	var startpairs: ((int, int), (int, int))[]
	var k = 0

	var gs: string
	while k < Q.goals.length
	{
		gs += Q.goals[k].0
		k += 1
	}


	// here's what we do, because 7! = 5040, which is *okay* i suppose
	// permutate between every possible arragement of visits that start at 0, and visit every node

	// first, precompute all the lengths
	var list: ((int, int), (int, int), int)[]
	printf("precomputing inter-node distances...\n")
	do {

		// do from 0 to the thing
		var g = 0
		while g < Q.goals.length
		{
			let gl = Q.goals[g]
			let p = aStarSearch(Q.start, Node(gl.1, gl.2))
			let dist = p.nodes.length - 1
			dealloc p.nodes

			list += (Q.start.pos, (gl.1, gl.2), dist)

			// printf("(%s -> %c) [(%d, %d), (%d, %d)]: %d\n", "0", gl.0, Q.start.pos.0, Q.start.pos.1, gl.1, gl.2, dist)
			g += 1
		}
	}

	k = 0
	while k < Q.goals.length
	{
		var v = k + 1
		// var v = 0
		while v < Q.goals.length
		{
			if v != k
			{
				let gk = Q.goals[k]
				let gv = Q.goals[v]

				let p = aStarSearch(Node(gk.1, gk.2), Node(gv.1, gv.2))
 				let dist = p.nodes.length - 1

				dealloc p.nodes

				list += ((gk.1, gk.2), (gv.1, gv.2), dist)
				// printf("(%c -> %c) [(%d, %d), (%d, %d)]: %d\n", gk.0, gv.0, gk.1, gk.2, gv.1, gv.2, dist)
			}

			v += 1
		}

		k += 1
	}



	let perms = permute(gs)
	k = 0

	var best = (100000000, "")
	printf("permuting %d combinations\n", perms.length)
	while k < perms.length
	{
		// part 2: return to 0, so we add another 0.
		// remove for part 1.
		let path = "0" + perms[k] + "0"

		var length = 0

		var v = 0
		var prev = Q.start
		while v < path.length - 1
		{
			// pathfind from prev to current
			let g = getGoal(path[v + 1])

			// printf("%d", v)

			let n = Node(g.0, g.1)

			let d = getDistance(prev.pos, n.pos, list)
			if d == -1
			{
				abort()
			}
			else
			{
				length += d
			}

			prev = n
			v += 1
		}

		if length < best.0
		{
			best = (length, path)
		}

		k += 1
	}

	printf("best: %d  /  %s\n", best.0, best.1)
}

func getGoal(c: char) -> (int, int)
{
	if c == char("0")
	{
		return Q.start.pos
	}

	var k = 0
	while k < Q.goals.length
	{
		if Q.goals[k].0 == c
		{
			return (Q.goals[k].1, Q.goals[k].2)
		}

		k += 1
	}

	return (0, 0)
}

func getDistance(a: (int, int), b: (int, int), list: ((int, int), (int, int), int)[]) -> int
{
	var k = 0
	while k < list.length
	{
		let l = list[k]
		if (l.0 == a && l.1 == b) || (l.1 == a && l.0 == b)
		{
			return l.2
		}

		k += 1
	}

	return -1
}





func isWall(pos: (int, int)) -> bool
{
	let x = pos.0
	let y = pos.1

	return Q.input[y][x] == char("#")
}


// graph structures
class Node
{
	var pos: (int, int)
	init(x: int, y: int)
	{
		self.pos = (x, y)
	}

	operator = (n: Node)
	{
		self.pos = n.pos
	}

	operator == (n: Node) -> bool
	{
		return self.pos == n.pos
	}

	func getNeighbours() -> Node[]
	{
		// get the (traversable) neighbours
		// check NSEW

		var ret: Node[]

		// up
		if !isWall((self.pos.0, self.pos.1 - 1))
		{
			ret += Node(self.pos.0, self.pos.1 - 1)
		}

		// down
		if !isWall((self.pos.0, self.pos.1 + 1))
		{
			ret += Node(self.pos.0, self.pos.1 + 1)
		}

		// left
		if !isWall((self.pos.0 - 1, self.pos.1))
		{
			ret += Node(self.pos.0 - 1, self.pos.1)
		}

		// right
		if !isWall((self.pos.0 + 1, self.pos.1))
		{
			ret += Node(self.pos.0 + 1, self.pos.1)
		}

		return ret
	}
}

class Path
{
	var weight: int
	var nodes: Node[]

	init(w: int, n: Node)
	{
		self.weight = w
		self.nodes += n
	}

	init(w: int, ns: Node[])
	{
		self.weight = w
		self.nodes = ns
	}
}

// straight line distance to destination
func getSLDist(pos: (int, int), dest: (int, int)) -> int
{
	return Math.√(Math.square(pos.0 - dest.0) + Math.square(pos.1 - dest.1)) as int
}

func sortByWeight(a: Path, b: Path) -> bool
{
	return a.weight > b.weight
}

func didAlreadyVisit(v: Node[], n: Node) -> bool
{
	var k = 0
	while k < v.length
	{
		if v[k] == n { return true }
		k += 1
	}

	return false
}

func aStarSearch(start: Node, dest: Node) -> Path
{
	var queue: Path[]
	defer dealloc queue

	var visited: Node[]
	defer dealloc visited


	// initial path
	// weight is current length (0) + straight line distance
	queue += Path(getSLDist(start.pos, dest.pos), start)
	visited += start


	while queue.length > 0
	{
		let path = queue.popBack()
		assert(path.nodes.length > 0)

		// ok, get the last node -- this is the one we check for neighbours
		let n = path.nodes.back()
		let nodes = n.getNeighbours()

		var k = 0
		while k < nodes.length
		{
			let nd = nodes[k]

			if !didAlreadyVisit(visited, nd)
			{
				visited += nd

				// the "length" of a path is simply the number of nodes, since
				// we're operating on a grid system
				var newp = Path(path.nodes.length + getSLDist(nd.pos, dest.pos), path.nodes + nd)

				if nd.pos == dest.pos
				{
					// great, exit here
					// build a path

					dealloc nodes
					dealloc queue
					dealloc visited
					return newp
				}

				// guess not.
				// add the paths back into the queue
				queue += newp
			}

			k += 1
		}

		dealloc nodes
		dealloc path.nodes

		// sort the queue
		let q = mergeSort(queue, sortByWeight)
		dealloc queue
		queue = q
	}

	// did not return -- queue became empty at some point
	printf("fail\n")
	// abort()

	// unreachable anyway
	return Path()
}








// merge sort


func split<T>(s: T[]) -> (T[], T[])
{
	let div = s.length / 2

	var a: T[]
	var b: T[]
	var i = 0

	while i < div
	{
		a += s[i]
		i += 1
	}

	while i < s.length
	{
		b += s[i]
		i += 1
	}

	return (a, b)
}

func _merge<T>(a: T[], b: T[], cmp: [(T, T) -> bool]) -> T[]
{
	var ret: T[]

	var al = a.length
	var bl = b.length

	while al > 0 && bl > 0
	{
		let ai = a.length - al
		let bi = b.length - bl

		if(cmp(a[ai], b[bi]))
		{
			ret += a[ai]
			al -= 1
		}
		else
		{
			ret += b[bi]
			bl -= 1
		}
	}

	while al > 0
	{
		ret += a[a.length - al]
		al -= 1
	}

	while bl > 0
	{
		ret += b[b.length - bl]
		bl -= 1
	}

	dealloc a
	dealloc b
	return ret
}

func mergeSort<T>(arr: T[], cmp: [(T, T) -> bool]) -> T[]
{
	if arr.length <= 1
	{
		return arr
	}
	else
	{
		let a = split(arr)
		let a0 = mergeSort(a.0, cmp)
		let a1 = mergeSort(a.1, cmp)
		return _merge(a0, a1, cmp)
	}
}







func permute(str: string) -> string[]
{
	return _permute("", str)
}

func _permute(pre: string, str: string) -> string[]
{
	var arr: string[]

	let n = str.length
	if n == 0
	{
		arr += pre
	}
	else
	{
		var k = 0
		while k < n
		{
			var tmp = pre
			tmp += str[k]

			arr += _permute(tmp, str.substringInRange(0, k) + str.substringInRange(k + 1, n))
			k += 1
		}
	}

	return arr
}

// private static void permutation(String prefix, String str) {
//     int n = str.length();
//     if (n == 0) System.out.println(prefix);
//     else {
//         for (int i = 0; i < n; i++)
//             permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1, n));
//     }
// }







