// prog.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation

enum Op
{
	case MOV
	case INC
	case DEC
	case JMP
	case TGL
	case OUT
}

struct Instruction
{
	var opcode: Op
	var oper1: int		// a = 1000, b = 2000, c = 3000, d = 4000
	var oper2: int
}

public func main()
{
	let input = [
		"cpy a d",
		"cpy 7 c",
		"cpy 362 b",
		"inc d",
		"dec b",
		"jnz b -2",
		"dec c",
		"jnz c -5",
		"cpy d a",
		"jnz 0 0",
		"cpy a b",
		"cpy 0 a",
		"cpy 2 c",
		"jnz b 2",
		"jnz 1 6",
		"dec b",
		"dec c",
		"jnz c -4",
		"inc a",
		"jnz 1 -7",
		"cpy 2 b",
		"jnz c 2",
		"jnz 1 4",
		"dec b",
		"dec c",
		"jnz 1 -4",
		"jnz 0 0",
		"out b",
		"jnz a -19",
		"jnz 1 -21",
	]


	var k = 0
	var instrs: Instruction[]
	while k < input.length
	{
		let s = input[k]

		var op: Op = Op.MOV
		let op1 = s.substringInRange(4, s.substring(4, -1).find(" ") + 4)
		var op2 = ""

		if s.find("cpy") == 0
		{
			op = Op.MOV
			op2 = s.substring(5 + op1.length, -1)
		}
		else if s.find("jnz") == 0
		{
			op = Op.JMP
			op2 = s.substring(5 + op1.length, -1)
		}
		else if s.find("inc") == 0
		{
			op = Op.INC
		}
		else if s.find("dec") == 0
		{
			op = Op.DEC
		}
		else if s.find("tgl") == 0
		{
			op = Op.TGL
		}
		else if s.find("out") == 0
		{
			op = Op.OUT
		}
		else
		{
			abort()
		}


		var o1 = 0
		var o2 = 0

		if op1 == "a"
		{
			o1 = 1000
		}
		else if op1 == "b"
		{
			o1 = 2000
		}
		else if op1 == "c"
		{
			o1 = 3000
		}
		else if op1 == "d"
		{
			o1 = 4000
		}
		else
		{
			o1 = parseNum(op1)
		}




		if op2 == "a"
		{
			o2 = 1000
		}
		else if op2 == "b"
		{
			o2 = 2000
		}
		else if op2 == "c"
		{
			o2 = 3000
		}
		else if op2 == "d"
		{
			o2 = 4000
		}
		else if op2 != ""
		{
			o2 = parseNum(op2)
		}


		instrs += Instruction(op, o1, o2)
		// printf("%d: (%s) %d, (%s) %d\n", op, op1, o1, op2, o2)

		k += 1
	}


	var ctr = 1

	loop
	{
		// execute
		var k = 0
		var flag = true

		var RegA = ctr
		var RegB = 0
		var RegC = 0
		var RegD = 0

		var prevOut = -1

		printf("%d\n", ctr)

		loop
		{
			let op = instrs[k].opcode
			let o1 = instrs[k].oper1
			let o2 = instrs[k].oper2

			// printf("loop %d\n", k)

			if op == Op.MOV
			{
				// copy
				// get source
				var inp = 0

				if o1 == 1000
				{
					inp = RegA
				}
				else if o1 == 2000
				{
					inp = RegB
				}
				else if o1 == 3000
				{
					inp = RegC
				}
				else if o1 == 4000
				{
					inp = RegD
				}
				else
				{
					inp = o1
				}



				// get out
				if o2 == 1000
				{
					RegA = inp
				}
				else if o2 == 2000
				{
					RegB = inp
				}
				else if o2 == 3000
				{
					RegC = inp
				}
				else if o2 == 4000
				{
					RegD = inp
				}
			}
			else if op == Op.INC
			{
				// -1  cpy b c
				//  0  inc a
				//  1  dec c
				//  2  jnz c -2
				//  3  dec d
				//  4  jnz d -5

				// i mean... this could be optimised
				// but without printing the registers, the code completes in like 42 seconds so whatever


				if o1 == 1000
				{
					RegA += 1
				}
				else if o1 == 2000
				{
					RegB += 1
				}
				else if o1 == 3000
				{
					RegC += 1
				}
				else if o1 == 4000
				{
					RegD += 1
				}
			}
			else if op == Op.DEC
			{
				if o1 == 1000
				{
					RegA -= 1
				}
				else if o1 == 2000
				{
					RegB -= 1
				}
				else if o1 == 3000
				{
					RegC -= 1
				}
				else if o1 == 4000
				{
					RegD -= 1
				}
			}
			else if op == Op.JMP
			{
				var cond = 0
				if o1 == 1000
				{
					cond = RegA
				}
				else if o1 == 2000
				{
					cond = RegB
				}
				else if o1 == 3000
				{
					cond = RegC
				}
				else if o1 == 4000
				{
					cond = RegD
				}
				else
				{
					cond = o1
				}


				var tgt = 0
				if o2 == 1000
				{
					tgt = RegA
				}
				else if o2 == 2000
				{
					tgt = RegB
				}
				else if o2 == 3000
				{
					tgt = RegC
				}
				else if o2 == 4000
				{
					tgt = RegD
				}
				else
				{
					tgt = o2
				}


				if cond != 0
				{
					// move
					k += tgt
					k -= 1
				}
			}
			else if op == Op.OUT
			{
				var out = 0

				if o1 == 1000
				{
					out = RegA
				}
				else if o1 == 2000
				{
					out = RegB
				}
				else if o1 == 3000
				{
					out = RegC
				}
				else if o1 == 4000
				{
					out = RegD
				}
				else
				{
					out = o1
				}

				if (prevOut == 0 && out == 1) || (prevOut == 1 && out == 0) || (prevOut == -1)
				{
					flag = true
					prevOut = out
				}
				else
				{
					flag = false
					break
				}
			}
			else if op == Op.TGL
			{
				var target = 0
				if o1 == 1000
				{
					target = RegA
				}
				else if o1 == 2000
				{
					target = RegB
				}
				else if o1 == 3000
				{
					target = RegC
				}
				else if o1 == 4000
				{
					target = RegD
				}
				else
				{
					target = o1
				}



				// get the opcode of the instruction (target) away from us
				if k + target >= 0 && k + target < instrs.length
				{
					let top = instrs[k + target].opcode
					var newop: Op
					if top == Op.INC
					{
						// inc becomes dec
						newop = Op.DEC
					}
					else if top == Op.DEC || top == Op.TGL
					{
						// other one-args become inc
						newop = Op.INC
					}
					else if top == Op.JMP
					{
						// JNZ becomes MOV
						newop = Op.MOV
					}
					else if top == Op.MOV
					{
						// mov becomes jnz
						newop = Op.JMP
					}
					else
					{
						abort()
					}

					// printf("changing\n")
					let n1 = instrs[k + target].oper1
					let n2 = instrs[k + target].oper2
					instrs[k + target] = Instruction(newop, n1, n2)

				}
			}

			// printf("%d, %d, %d, %d                     \r", RegA, RegB, RegC, RegD)

			k += 1
			if k >= instrs.length { break }
		}

		if !flag
		{
			ctr += 1
		}
	}

	// note: output is just the number that it hangs on
}






func parseNum(str: string) -> int
{
	var s = str

	if s.length == 0 { return 0 }
	else if s.length == 1 { return s[0] as int - 48 }

	var mul = 1
	if s[0] == char("-")
	{
		s = s.substring(1, -1)
		mul = -1
	}

	var ret = 0
	var i = s.length - 1
	var pos = 1

	while i >= 0
	{
		ret = pos * (s[i] as int - 48) + ret

		i -= 1
		pos *= 10
	}

	return ret * mul
}
