// prog.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation


enum Direction
{
	case UP
	case DOWN
	case LEFT
	case RIGHT
}

func parseNum(s: string) -> int
{
	if s.length == 0 { return 0 }
	else if s.length == 1 { return s[0] as int - 48 }

	var ret = 0
	var i = s.length - 1
	var pos = 1

	while i >= 0
	{
		ret = pos * (s[i] as int - 48) + ret

		i -= 1
		pos *= 10
	}

	return ret
}

func abs(x: int) -> int
{
	if x < 0 { return -x }
	else { return x }
}

func find<T>(arr: T[], x: T) -> int
{
	var i = 0
	while i < arr.length
	{
		// printf("(%d, %d) == (%d, %d) ------ %d\n", arr[i].0, arr[i].1, x.0, x.1, arr[i] == x)
		if arr[i] == x
		{
			return i
		}

		i += 1
	}

	return -1
}



public func main() -> int
{
	let part = 1

	// let input = [
	// 				"R2", "L1", "R2", "R1", "R1", "L3",
	// 				"R3", "L5", "L5", "L2", "L1", "R4",
	// 				"R1", "R3", "L5", "L5", "R3", "L4",
	// 				"L4", "R5", "R4", "R3", "L1", "L2",
	// 				"R5", "R4", "L2", "R1", "R4", "R4",
	// 				"L2", "L1", "L1", "R190", "R3", "L4",
	// 				"R52", "R5", "R3", "L5", "R3", "R2",
	// 				"R1", "L5", "L5", "L4", "R2", "L3",
	// 				"R3", "L1", "L3", "R5", "L3", "L4",
	// 				"R3", "R77", "R3", "L2", "R189", "R4",
	// 				"R2", "L2", "R2", "L1", "R5", "R4",
	// 				"R4", "R2", "L2", "L2", "L5", "L1",
	// 				"R1", "R2", "L3", "L4", "L5", "R1",
	// 				"L1", "L2", "L2", "R2", "L3", "R3",
	// 				"L4", "L1", "L5", "L4", "L4", "R3",
	// 				"R5", "L2", "R4", "R5", "R3", "L2",
	// 				"L2", "L4", "L2", "R2", "L5", "L4",
	// 				"R3", "R1", "L2", "R2", "R4", "L1",
	// 				"L4", "L4", "L2", "R2", "L4", "L1",
	// 				"L1", "R4", "L1", "L3", "L2", "L2",
	// 				"L5", "R5", "R2", "R5", "L1", "L5",
	// 				"R2", "R4", "R4", "L2", "R5", "L5",
	// 				"R5", "R5", "L4", "R2", "R1", "R1",
	// 				"R3", "L3", "L3", "L4", "L3", "L2",
	// 				"L2", "L2", "R2", "L1", "L3", "R2",
	// 				"R5", "R5", "L4", "R3", "L3", "L4",
	// 				"R2", "L5", "R5"
	// 			]

	let input = [
	"L2", "L5", "L5", "R5", "L2", "L4", "R1", "R1", "L4", "R2", "R1", "L1", "L4", "R1", "L4", "L4", "R5", "R3", "R1", "L1", "R1", "L5", "L1", "R5", "L4", "R2", "L5", "L3", "L3", "R3", "L3", "R4", "R4", "L2", "L5", "R1", "R2", "L2", "L1", "R3", "R4", "L193", "R3", "L5", "R45", "L1", "R4", "R79", "L5", "L5", "R5", "R1", "L4", "R3", "R3", "L4", "R185", "L5", "L3", "L1", "R5", "L2", "R1", "R3", "R2", "L3", "L4", "L2", "R2", "L3", "L2", "L2", "L3", "L5", "R3", "R4", "L5", "R1", "R2", "L2", "R4", "R3", "L4", "L3", "L1", "R3", "R2", "R1", "R1", "L3", "R4", "L5", "R2", "R1", "R3", "L3", "L2", "L2", "R2", "R1", "R2", "R3", "L3", "L3", "R4", "L4", "R4", "R4", "R4", "L3", "L1", "L2", "R5", "R2", "R2", "R2", "L4", "L3", "L4", "R4", "L5", "L4", "R2", "L4", "L4", "R4", "R1", "R5", "L2", "L4", "L5", "L3", "L2", "L4", "L4", "R3", "L3", "L4", "R1", "L2", "R3", "L2", "R1", "R2", "R5", "L4", "L2", "L1", "L3", "R2", "R3", "L2", "L1", "L5", "L2", "L1", "R4"
	]

	var facing: Direction = Direction.UP
	var pos = (0, 0)

	var x = 0
	var y = 0


	var visited: (int, int)[]
	visited += (0, 0)



	var i = 0
	while i < input.length
	{
		if input[i][0] == char("R")
		{
			if facing == Direction.UP
			{
				facing = Direction.RIGHT
			}
			else if facing == Direction.DOWN
			{
				facing = Direction.LEFT
			}
			else if facing == Direction.LEFT
			{
				facing = Direction.UP
			}
			else // facing == Direction.RIGHT
			{
				facing = Direction.DOWN
			}
		}
		else
		{
			if facing == Direction.UP
			{
				facing = Direction.LEFT
			}
			else if facing == Direction.DOWN
			{
				facing = Direction.RIGHT
			}
			else if facing == Direction.LEFT
			{
				facing = Direction.DOWN
			}
			else // facing == Direction.RIGHT
			{
				facing = Direction.UP
			}
		}


		// fuck
		var k = 1
		var n = ""
		while k < input[i].length
		{
			n += input[i][k]
			k += 1
		}


		var num = parseNum(n)
		var flag = false


		while num > 0
		{
			if facing == Direction.UP
			{
				y += 1
			}
			else if facing == Direction.DOWN
			{
				y -= 1
			}
			else if facing == Direction.RIGHT
			{
				x += 1
			}
			else // left
			{
				x -= 1
			}

			if part == 2
			{
				if find(visited, (x, y)) == -1
				{
					visited += (x, y)
				}
				else
				{
					flag = true
					break
				}
			}

			num -= 1
		}

		if flag { break }


		i += 1
	}


	var k = 0
	while k < visited.length
	{
		k += 1
	}


	let dist = abs(x) + abs(y)

	printf("distance: %d\n", dist)

	return 0
}



















