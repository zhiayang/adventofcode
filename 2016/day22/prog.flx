// prog.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation

namespace Q
{
	var nodeList: Node[][]
	var goal: Node
	var empty: Node

	var maxFree = 0

	var dimX = 0
	var dimY = 0
}

public func main()
{
	let input = [
		// name | size | used | free | percent used
		((0, 0), 89, 65, 24, 73),
		((0, 1), 92, 64, 28, 69),
		((0, 2), 85, 70, 15, 82),
		((0, 3), 90, 64, 26, 71),
		((0, 4), 86, 72, 14, 83),
		((0, 5), 90, 68, 22, 75),
		((0, 6), 94, 64, 30, 68),
		((0, 7), 87, 72, 15, 82),
		((0, 8), 90, 65, 25, 72),
		((0, 9), 90, 65, 25, 72),
		((0, 10), 89, 66, 23, 74),
		((0, 11), 94, 70, 24, 74),
		((0, 12), 90, 65, 25, 72),
		((0, 13), 91, 72, 19, 79),
		((0, 14), 85, 70, 15, 82),
		((0, 15), 89, 70, 19, 78),
		((0, 16), 90, 66, 24, 73),
		((0, 17), 86, 64, 22, 74),
		((0, 18), 88, 65, 23, 73),
		((0, 19), 85, 68, 17, 80),
		((0, 20), 93, 70, 23, 75),
		((0, 21), 89, 64, 25, 71),
		((0, 22), 87, 67, 20, 77),
		((0, 23), 90, 73, 17, 81),
		((0, 24), 92, 68, 24, 73),
		((0, 25), 88, 69, 19, 78),
		((0, 26), 88, 69, 19, 78),
		((0, 27), 86, 72, 14, 83),
		((0, 28), 92, 71, 21, 77),
		((1, 0), 89, 73, 16, 82),
		((1, 1), 89, 68, 21, 76),
		((1, 2), 94, 70, 24, 74),
		((1, 3), 90, 68, 22, 75),
		((1, 4), 89, 67, 22, 75),
		((1, 5), 90, 70, 20, 77),
		((1, 6), 92, 71, 21, 77),
		((1, 7), 92, 71, 21, 77),
		((1, 8), 86, 73, 13, 84),
		((1, 9), 87, 69, 18, 79),
		((1, 10), 87, 66, 21, 75),
		((1, 11), 85, 72, 13, 84),
		((1, 12), 90, 69, 21, 76),
		((1, 13), 89, 67, 22, 75),
		((1, 14), 90, 65, 25, 72),
		((1, 15), 94, 65, 29, 69),
		((1, 16), 85, 70, 15, 82),
		((1, 17), 93, 64, 29, 68),
		((1, 18), 87, 68, 19, 78),
		((1, 19), 85, 66, 19, 77),
		((1, 20), 90, 72, 18, 80),
		((1, 21), 89, 73, 16, 82),
		((1, 22), 90, 65, 25, 72),
		((1, 23), 91, 72, 19, 79),
		((1, 24), 87, 70, 17, 80),
		((1, 25), 91, 64, 27, 70),
		((1, 26), 90, 64, 26, 71),
		((1, 27), 93, 69, 24, 74),
		((1, 28), 89, 65, 24, 73),
		((2, 0), 89, 72, 17, 80),
		((2, 1), 92, 69, 23, 75),
		((2, 2), 91, 65, 26, 71),
		((2, 3), 86, 73, 13, 84),
		((2, 4), 90, 69, 21, 76),
		((2, 5), 86, 68, 18, 79),
		((2, 6), 91, 70, 21, 76),
		((2, 7), 86, 64, 22, 74),
		((2, 8), 88, 65, 23, 73),
		((2, 9), 94, 73, 21, 77),
		((2, 10), 89, 71, 18, 79),
		((2, 11), 88, 64, 24, 72),
		((2, 12), 92, 71, 21, 77),
		((2, 13), 86, 69, 17, 80),
		((2, 14), 87, 69, 18, 79),
		((2, 15), 93, 71, 22, 76),
		((2, 16), 91, 65, 26, 71),
		((2, 17), 93, 65, 28, 69),
		((2, 18), 86, 69, 17, 80),
		((2, 19), 87, 69, 18, 79),
		((2, 20), 86, 72, 14, 83),
		((2, 21), 86, 73, 13, 84),
		((2, 22), 505, 499, 6, 98),
		((2, 23), 89, 65, 24, 73),
		((2, 24), 92, 64, 28, 69),
		((2, 25), 94, 64, 30, 68),
		((2, 26), 87, 73, 14, 83),
		((2, 27), 87, 69, 18, 79),
		((2, 28), 94, 71, 23, 75),
		((3, 0), 88, 66, 22, 75),
		((3, 1), 91, 69, 22, 75),
		((3, 2), 91, 69, 22, 75),
		((3, 3), 86, 67, 19, 77),
		((3, 4), 90, 64, 26, 71),
		((3, 5), 89, 72, 17, 80),
		((3, 6), 87, 66, 21, 75),
		((3, 7), 90, 68, 22, 75),
		((3, 8), 91, 66, 25, 72),
		((3, 9), 89, 64, 25, 71),
		((3, 10), 92, 67, 25, 72),
		((3, 11), 86, 64, 22, 74),
		((3, 12), 94, 65, 29, 69),
		((3, 13), 91, 70, 21, 76),
		((3, 14), 89, 72, 17, 80),
		((3, 15), 89, 64, 25, 71),
		((3, 16), 85, 73, 12, 85),
		((3, 17), 89, 65, 24, 73),
		((3, 18), 88, 71, 17, 80),
		((3, 19), 89, 69, 20, 77),
		((3, 20), 91, 68, 23, 74),
		((3, 21), 90, 72, 18, 80),
		((3, 22), 505, 498, 7, 98),
		((3, 23), 85, 65, 20, 76),
		((3, 24), 94, 72, 22, 76),
		((3, 25), 90, 68, 22, 75),
		((3, 26), 90, 65, 25, 72),
		((3, 27), 87, 66, 21, 75),
		((3, 28), 90, 66, 24, 73),
		((4, 0), 86, 67, 19, 77),
		((4, 1), 92, 67, 25, 72),
		((4, 2), 91, 71, 20, 78),
		((4, 3), 94, 69, 25, 73),
		((4, 4), 90, 64, 26, 71),
		((4, 5), 93, 70, 23, 75),
		((4, 6), 93, 67, 26, 72),
		((4, 7), 91, 71, 20, 78),
		((4, 8), 90, 70, 20, 77),
		((4, 9), 89, 66, 23, 74),
		((4, 10), 94, 64, 30, 68),
		((4, 11), 94, 70, 24, 74),
		((4, 12), 89, 69, 20, 77),
		((4, 13), 90, 72, 18, 80),
		((4, 14), 88, 69, 19, 78),
		((4, 15), 85, 64, 21, 75),
		((4, 16), 86, 71, 15, 82),
		((4, 17), 90, 65, 25, 72),
		((4, 18), 88, 65, 23, 73),
		((4, 19), 91, 71, 20, 78),
		((4, 20), 94, 71, 23, 75),
		((4, 21), 91, 65, 26, 71),
		((4, 22), 510, 491, 19, 96),
		((4, 23), 86, 72, 14, 83),
		((4, 24), 91, 69, 22, 75),
		((4, 25), 93, 64, 29, 68),
		((4, 26), 92, 65, 27, 70),
		((4, 27), 91, 67, 24, 73),
		((4, 28), 93, 66, 27, 70),
		((5, 0), 85, 70, 15, 82),
		((5, 1), 90, 71, 19, 78),
		((5, 2), 94, 68, 26, 72),
		((5, 3), 88, 73, 15, 82),
		((5, 4), 85, 71, 14, 83),
		((5, 5), 92, 67, 25, 72),
		((5, 6), 92, 68, 24, 73),
		((5, 7), 86, 69, 17, 80),
		((5, 8), 90, 64, 26, 71),
		((5, 9), 88, 71, 17, 80),
		((5, 10), 91, 65, 26, 71),
		((5, 11), 92, 65, 27, 70),
		((5, 12), 87, 66, 21, 75),
		((5, 13), 87, 71, 16, 81),
		((5, 14), 90, 67, 23, 74),
		((5, 15), 92, 70, 22, 76),
		((5, 16), 94, 66, 28, 70),
		((5, 17), 88, 68, 20, 77),
		((5, 18), 86, 69, 17, 80),
		((5, 19), 94, 66, 28, 70),
		((5, 20), 90, 69, 21, 76),
		((5, 21), 88, 71, 17, 80),
		((5, 22), 509, 496, 13, 97),
		((5, 23), 87, 67, 20, 77),
		((5, 24), 91, 64, 27, 70),
		((5, 25), 93, 69, 24, 74),
		((5, 26), 93, 73, 20, 78),
		((5, 27), 88, 70, 18, 79),
		((5, 28), 87, 73, 14, 83),
		((6, 0), 87, 65, 22, 74),
		((6, 1), 85, 64, 21, 75),
		((6, 2), 91, 72, 19, 79),
		((6, 3), 90, 64, 26, 71),
		((6, 4), 93, 66, 27, 70),
		((6, 5), 93, 67, 26, 72),
		((6, 6), 89, 64, 25, 71),
		((6, 7), 89, 64, 25, 71),
		((6, 8), 86, 72, 14, 83),
		((6, 9), 87, 68, 19, 78),
		((6, 10), 94, 73, 21, 77),
		((6, 11), 88, 65, 23, 73),
		((6, 12), 88, 70, 18, 79),
		((6, 13), 93, 66, 27, 70),
		((6, 14), 87, 68, 19, 78),
		((6, 15), 87, 68, 19, 78),
		((6, 16), 87, 73, 14, 83),
		((6, 17), 87, 70, 17, 80),
		((6, 18), 87, 69, 18, 79),
		((6, 19), 85, 67, 18, 78),
		((6, 20), 91, 71, 20, 78),
		((6, 21), 86, 72, 14, 83),
		((6, 22), 503, 497, 6, 98),
		((6, 23), 93, 72, 21, 77),
		((6, 24), 91, 72, 19, 79),
		((6, 25), 85, 67, 18, 78),
		((6, 26), 86, 65, 21, 75),
		((6, 27), 92, 67, 25, 72),
		((6, 28), 87, 72, 15, 82),
		((7, 0), 88, 67, 21, 76),
		((7, 1), 85, 64, 21, 75),
		((7, 2), 90, 67, 23, 74),
		((7, 3), 87, 65, 22, 74),
		((7, 4), 92, 70, 22, 76),
		((7, 5), 89, 67, 22, 75),
		((7, 6), 90, 65, 25, 72),
		((7, 7), 88, 66, 22, 75),
		((7, 8), 88, 65, 23, 73),
		((7, 9), 93, 72, 21, 77),
		((7, 10), 91, 70, 21, 76),
		((7, 11), 90, 70, 20, 77),
		((7, 12), 89, 68, 21, 76),
		((7, 13), 91, 65, 26, 71),
		((7, 14), 90, 65, 25, 72),
		((7, 15), 85, 65, 20, 76),
		((7, 16), 91, 65, 26, 71),
		((7, 17), 89, 72, 17, 80),
		((7, 18), 88, 65, 23, 73),
		((7, 19), 94, 72, 22, 76),
		((7, 20), 85, 73, 12, 85),
		((7, 21), 85, 68, 17, 80),
		((7, 22), 507, 497, 10, 98),
		((7, 23), 91, 69, 22, 75),
		((7, 24), 93, 68, 25, 73),
		((7, 25), 90, 72, 18, 80),
		((7, 26), 91, 70, 21, 76),
		((7, 27), 93, 65, 28, 69),
		((7, 28), 91, 64, 27, 70),
		((8, 0), 86, 71, 15, 82),
		((8, 1), 88, 69, 19, 78),
		((8, 2), 90, 64, 26, 71),
		((8, 3), 92, 67, 25, 72),
		((8, 4), 86, 71, 15, 82),
		((8, 5), 88, 68, 20, 77),
		((8, 6), 90, 71, 19, 78),
		((8, 7), 86, 70, 16, 81),
		((8, 8), 87, 72, 15, 82),
		((8, 9), 93, 67, 26, 72),
		((8, 10), 93, 65, 28, 69),
		((8, 11), 94, 66, 28, 70),
		((8, 12), 92, 70, 22, 76),
		((8, 13), 91, 68, 23, 74),
		((8, 14), 93, 72, 21, 77),
		((8, 15), 90, 71, 19, 78),
		((8, 16), 87, 73, 14, 83),
		((8, 17), 86, 73, 13, 84),
		((8, 18), 89, 68, 21, 76),
		((8, 19), 88, 67, 21, 76),
		((8, 20), 87, 64, 23, 73),
		((8, 21), 90, 71, 19, 78),
		((8, 22), 505, 497, 8, 98),
		((8, 23), 92, 72, 20, 78),
		((8, 24), 86, 70, 16, 81),
		((8, 25), 92, 69, 23, 75),
		((8, 26), 93, 71, 22, 76),
		((8, 27), 91, 70, 21, 76),
		((8, 28), 92, 0, 92, 0),
		((9, 0), 87, 69, 18, 79),
		((9, 1), 90, 69, 21, 76),
		((9, 2), 91, 69, 22, 75),
		((9, 3), 92, 71, 21, 77),
		((9, 4), 91, 66, 25, 72),
		((9, 5), 92, 65, 27, 70),
		((9, 6), 87, 71, 16, 81),
		((9, 7), 88, 68, 20, 77),
		((9, 8), 85, 67, 18, 78),
		((9, 9), 86, 65, 21, 75),
		((9, 10), 88, 64, 24, 72),
		((9, 11), 90, 70, 20, 77),
		((9, 12), 88, 64, 24, 72),
		((9, 13), 85, 69, 16, 81),
		((9, 14), 85, 71, 14, 83),
		((9, 15), 92, 70, 22, 76),
		((9, 16), 92, 65, 27, 70),
		((9, 17), 89, 66, 23, 74),
		((9, 18), 85, 69, 16, 81),
		((9, 19), 94, 69, 25, 73),
		((9, 20), 92, 66, 26, 71),
		((9, 21), 88, 70, 18, 79),
		((9, 22), 507, 498, 9, 98),
		((9, 23), 86, 68, 18, 79),
		((9, 24), 90, 69, 21, 76),
		((9, 25), 87, 65, 22, 74),
		((9, 26), 86, 71, 15, 82),
		((9, 27), 85, 65, 20, 76),
		((9, 28), 87, 70, 17, 80),
		((10, 0), 91, 64, 27, 70),
		((10, 1), 92, 65, 27, 70),
		((10, 2), 89, 66, 23, 74),
		((10, 3), 94, 64, 30, 68),
		((10, 4), 92, 69, 23, 75),
		((10, 5), 91, 64, 27, 70),
		((10, 6), 86, 72, 14, 83),
		((10, 7), 87, 66, 21, 75),
		((10, 8), 90, 73, 17, 81),
		((10, 9), 91, 73, 18, 80),
		((10, 10), 94, 71, 23, 75),
		((10, 11), 94, 71, 23, 75),
		((10, 12), 92, 67, 25, 72),
		((10, 13), 92, 66, 26, 71),
		((10, 14), 86, 66, 20, 76),
		((10, 15), 93, 73, 20, 78),
		((10, 16), 92, 66, 26, 71),
		((10, 17), 92, 71, 21, 77),
		((10, 18), 86, 65, 21, 75),
		((10, 19), 92, 68, 24, 73),
		((10, 20), 87, 66, 21, 75),
		((10, 21), 90, 65, 25, 72),
		((10, 22), 501, 494, 7, 98),
		((10, 23), 87, 66, 21, 75),
		((10, 24), 85, 69, 16, 81),
		((10, 25), 90, 72, 18, 80),
		((10, 26), 94, 69, 25, 73),
		((10, 27), 86, 69, 17, 80),
		((10, 28), 90, 68, 22, 75),
		((11, 0), 90, 65, 25, 72),
		((11, 1), 90, 70, 20, 77),
		((11, 2), 94, 69, 25, 73),
		((11, 3), 92, 72, 20, 78),
		((11, 4), 93, 67, 26, 72),
		((11, 5), 89, 70, 19, 78),
		((11, 6), 87, 66, 21, 75),
		((11, 7), 92, 70, 22, 76),
		((11, 8), 93, 71, 22, 76),
		((11, 9), 93, 68, 25, 73),
		((11, 10), 85, 65, 20, 76),
		((11, 11), 90, 72, 18, 80),
		((11, 12), 89, 65, 24, 73),
		((11, 13), 86, 69, 17, 80),
		((11, 14), 93, 73, 20, 78),
		((11, 15), 93, 68, 25, 73),
		((11, 16), 92, 72, 20, 78),
		((11, 17), 85, 71, 14, 83),
		((11, 18), 90, 68, 22, 75),
		((11, 19), 90, 69, 21, 76),
		((11, 20), 85, 73, 12, 85),
		((11, 21), 93, 68, 25, 73),
		((11, 22), 504, 491, 13, 97),
		((11, 23), 87, 69, 18, 79),
		((11, 24), 88, 65, 23, 73),
		((11, 25), 94, 67, 27, 71),
		((11, 26), 92, 73, 19, 79),
		((11, 27), 87, 64, 23, 73),
		((11, 28), 89, 70, 19, 78),
		((12, 0), 88, 73, 15, 82),
		((12, 1), 90, 68, 22, 75),
		((12, 2), 85, 65, 20, 76),
		((12, 3), 94, 71, 23, 75),
		((12, 4), 86, 68, 18, 79),
		((12, 5), 89, 67, 22, 75),
		((12, 6), 89, 71, 18, 79),
		((12, 7), 85, 68, 17, 80),
		((12, 8), 94, 68, 26, 72),
		((12, 9), 91, 71, 20, 78),
		((12, 10), 91, 65, 26, 71),
		((12, 11), 91, 71, 20, 78),
		((12, 12), 85, 65, 20, 76),
		((12, 13), 89, 71, 18, 79),
		((12, 14), 85, 70, 15, 82),
		((12, 15), 92, 73, 19, 79),
		((12, 16), 94, 66, 28, 70),
		((12, 17), 90, 72, 18, 80),
		((12, 18), 90, 64, 26, 71),
		((12, 19), 87, 72, 15, 82),
		((12, 20), 89, 70, 19, 78),
		((12, 21), 90, 66, 24, 73),
		((12, 22), 506, 497, 9, 98),
		((12, 23), 90, 67, 23, 74),
		((12, 24), 85, 67, 18, 78),
		((12, 25), 85, 72, 13, 84),
		((12, 26), 94, 71, 23, 75),
		((12, 27), 92, 64, 28, 69),
		((12, 28), 90, 65, 25, 72),
		((13, 0), 85, 72, 13, 84),
		((13, 1), 93, 67, 26, 72),
		((13, 2), 94, 64, 30, 68),
		((13, 3), 85, 71, 14, 83),
		((13, 4), 93, 71, 22, 76),
		((13, 5), 85, 67, 18, 78),
		((13, 6), 91, 68, 23, 74),
		((13, 7), 92, 66, 26, 71),
		((13, 8), 88, 66, 22, 75),
		((13, 9), 91, 72, 19, 79),
		((13, 10), 89, 72, 17, 80),
		((13, 11), 90, 68, 22, 75),
		((13, 12), 89, 65, 24, 73),
		((13, 13), 90, 69, 21, 76),
		((13, 14), 86, 64, 22, 74),
		((13, 15), 91, 65, 26, 71),
		((13, 16), 86, 72, 14, 83),
		((13, 17), 85, 71, 14, 83),
		((13, 18), 85, 68, 17, 80),
		((13, 19), 91, 69, 22, 75),
		((13, 20), 87, 70, 17, 80),
		((13, 21), 94, 65, 29, 69),
		((13, 22), 503, 492, 11, 97),
		((13, 23), 91, 70, 21, 76),
		((13, 24), 91, 66, 25, 72),
		((13, 25), 88, 64, 24, 72),
		((13, 26), 87, 70, 17, 80),
		((13, 27), 91, 66, 25, 72),
		((13, 28), 86, 68, 18, 79),
		((14, 0), 85, 67, 18, 78),
		((14, 1), 87, 70, 17, 80),
		((14, 2), 92, 67, 25, 72),
		((14, 3), 87, 64, 23, 73),
		((14, 4), 92, 73, 19, 79),
		((14, 5), 86, 66, 20, 76),
		((14, 6), 89, 69, 20, 77),
		((14, 7), 89, 67, 22, 75),
		((14, 8), 89, 70, 19, 78),
		((14, 9), 91, 70, 21, 76),
		((14, 10), 87, 70, 17, 80),
		((14, 11), 86, 66, 20, 76),
		((14, 12), 92, 67, 25, 72),
		((14, 13), 87, 68, 19, 78),
		((14, 14), 94, 65, 29, 69),
		((14, 15), 93, 68, 25, 73),
		((14, 16), 87, 66, 21, 75),
		((14, 17), 90, 70, 20, 77),
		((14, 18), 90, 66, 24, 73),
		((14, 19), 89, 71, 18, 79),
		((14, 20), 85, 72, 13, 84),
		((14, 21), 90, 66, 24, 73),
		((14, 22), 504, 491, 13, 97),
		((14, 23), 90, 71, 19, 78),
		((14, 24), 94, 68, 26, 72),
		((14, 25), 91, 73, 18, 80),
		((14, 26), 88, 68, 20, 77),
		((14, 27), 86, 66, 20, 76),
		((14, 28), 92, 70, 22, 76),
		((15, 0), 91, 73, 18, 80),
		((15, 1), 85, 65, 20, 76),
		((15, 2), 88, 67, 21, 76),
		((15, 3), 91, 66, 25, 72),
		((15, 4), 92, 65, 27, 70),
		((15, 5), 94, 66, 28, 70),
		((15, 6), 90, 67, 23, 74),
		((15, 7), 91, 72, 19, 79),
		((15, 8), 88, 65, 23, 73),
		((15, 9), 90, 66, 24, 73),
		((15, 10), 86, 69, 17, 80),
		((15, 11), 89, 67, 22, 75),
		((15, 12), 86, 67, 19, 77),
		((15, 13), 85, 65, 20, 76),
		((15, 14), 92, 68, 24, 73),
		((15, 15), 85, 73, 12, 85),
		((15, 16), 86, 65, 21, 75),
		((15, 17), 92, 69, 23, 75),
		((15, 18), 87, 72, 15, 82),
		((15, 19), 92, 64, 28, 69),
		((15, 20), 92, 71, 21, 77),
		((15, 21), 86, 71, 15, 82),
		((15, 22), 501, 494, 7, 98),
		((15, 23), 93, 65, 28, 69),
		((15, 24), 85, 71, 14, 83),
		((15, 25), 90, 66, 24, 73),
		((15, 26), 87, 67, 20, 77),
		((15, 27), 90, 70, 20, 77),
		((15, 28), 89, 71, 18, 79),
		((16, 0), 91, 72, 19, 79),
		((16, 1), 91, 65, 26, 71),
		((16, 2), 90, 64, 26, 71),
		((16, 3), 87, 67, 20, 77),
		((16, 4), 86, 66, 20, 76),
		((16, 5), 88, 73, 15, 82),
		((16, 6), 85, 68, 17, 80),
		((16, 7), 86, 66, 20, 76),
		((16, 8), 91, 69, 22, 75),
		((16, 9), 87, 66, 21, 75),
		((16, 10), 86, 72, 14, 83),
		((16, 11), 90, 66, 24, 73),
		((16, 12), 85, 72, 13, 84),
		((16, 13), 88, 71, 17, 80),
		((16, 14), 90, 70, 20, 77),
		((16, 15), 91, 71, 20, 78),
		((16, 16), 86, 70, 16, 81),
		((16, 17), 86, 73, 13, 84),
		((16, 18), 88, 66, 22, 75),
		((16, 19), 92, 67, 25, 72),
		((16, 20), 92, 73, 19, 79),
		((16, 21), 94, 71, 23, 75),
		((16, 22), 507, 498, 9, 98),
		((16, 23), 92, 72, 20, 78),
		((16, 24), 85, 72, 13, 84),
		((16, 25), 88, 66, 22, 75),
		((16, 26), 92, 67, 25, 72),
		((16, 27), 94, 64, 30, 68),
		((16, 28), 86, 66, 20, 76),
		((17, 0), 88, 65, 23, 73),
		((17, 1), 85, 66, 19, 77),
		((17, 2), 88, 70, 18, 79),
		((17, 3), 89, 68, 21, 76),
		((17, 4), 89, 68, 21, 76),
		((17, 5), 94, 69, 25, 73),
		((17, 6), 85, 66, 19, 77),
		((17, 7), 93, 67, 26, 72),
		((17, 8), 87, 67, 20, 77),
		((17, 9), 94, 67, 27, 71),
		((17, 10), 92, 64, 28, 69),
		((17, 11), 94, 68, 26, 72),
		((17, 12), 85, 66, 19, 77),
		((17, 13), 87, 68, 19, 78),
		((17, 14), 89, 65, 24, 73),
		((17, 15), 94, 69, 25, 73),
		((17, 16), 90, 69, 21, 76),
		((17, 17), 85, 66, 19, 77),
		((17, 18), 91, 68, 23, 74),
		((17, 19), 89, 73, 16, 82),
		((17, 20), 94, 66, 28, 70),
		((17, 21), 91, 68, 23, 74),
		((17, 22), 509, 499, 10, 98),
		((17, 23), 89, 69, 20, 77),
		((17, 24), 91, 64, 27, 70),
		((17, 25), 89, 66, 23, 74),
		((17, 26), 91, 72, 19, 79),
		((17, 27), 93, 69, 24, 74),
		((17, 28), 87, 73, 14, 83),
		((18, 0), 85, 69, 16, 81),
		((18, 1), 90, 65, 25, 72),
		((18, 2), 85, 69, 16, 81),
		((18, 3), 89, 66, 23, 74),
		((18, 4), 88, 69, 19, 78),
		((18, 5), 90, 70, 20, 77),
		((18, 6), 90, 69, 21, 76),
		((18, 7), 92, 67, 25, 72),
		((18, 8), 85, 64, 21, 75),
		((18, 9), 86, 68, 18, 79),
		((18, 10), 89, 66, 23, 74),
		((18, 11), 87, 70, 17, 80),
		((18, 12), 93, 68, 25, 73),
		((18, 13), 89, 67, 22, 75),
		((18, 14), 91, 66, 25, 72),
		((18, 15), 91, 65, 26, 71),
		((18, 16), 90, 66, 24, 73),
		((18, 17), 85, 69, 16, 81),
		((18, 18), 93, 70, 23, 75),
		((18, 19), 93, 64, 29, 68),
		((18, 20), 87, 70, 17, 80),
		((18, 21), 87, 73, 14, 83),
		((18, 22), 503, 498, 5, 99),
		((18, 23), 92, 68, 24, 73),
		((18, 24), 88, 68, 20, 77),
		((18, 25), 94, 64, 30, 68),
		((18, 26), 93, 66, 27, 70),
		((18, 27), 90, 67, 23, 74),
		((18, 28), 89, 67, 22, 75),
		((19, 0), 91, 67, 24, 73),
		((19, 1), 87, 64, 23, 73),
		((19, 2), 94, 64, 30, 68),
		((19, 3), 90, 71, 19, 78),
		((19, 4), 88, 66, 22, 75),
		((19, 5), 93, 69, 24, 74),
		((19, 6), 89, 73, 16, 82),
		((19, 7), 91, 68, 23, 74),
		((19, 8), 89, 67, 22, 75),
		((19, 9), 90, 72, 18, 80),
		((19, 10), 93, 73, 20, 78),
		((19, 11), 88, 70, 18, 79),
		((19, 12), 89, 67, 22, 75),
		((19, 13), 91, 65, 26, 71),
		((19, 14), 92, 67, 25, 72),
		((19, 15), 88, 69, 19, 78),
		((19, 16), 93, 72, 21, 77),
		((19, 17), 88, 64, 24, 72),
		((19, 18), 88, 67, 21, 76),
		((19, 19), 85, 65, 20, 76),
		((19, 20), 90, 68, 22, 75),
		((19, 21), 88, 65, 23, 73),
		((19, 22), 508, 498, 10, 98),
		((19, 23), 93, 65, 28, 69),
		((19, 24), 85, 67, 18, 78),
		((19, 25), 92, 65, 27, 70),
		((19, 26), 92, 67, 25, 72),
		((19, 27), 91, 65, 26, 71),
		((19, 28), 91, 73, 18, 80),
		((20, 0), 86, 64, 22, 74),
		((20, 1), 89, 68, 21, 76),
		((20, 2), 92, 71, 21, 77),
		((20, 3), 86, 68, 18, 79),
		((20, 4), 86, 66, 20, 76),
		((20, 5), 94, 66, 28, 70),
		((20, 6), 91, 73, 18, 80),
		((20, 7), 87, 68, 19, 78),
		((20, 8), 94, 66, 28, 70),
		((20, 9), 89, 64, 25, 71),
		((20, 10), 92, 68, 24, 73),
		((20, 11), 94, 66, 28, 70),
		((20, 12), 88, 73, 15, 82),
		((20, 13), 91, 67, 24, 73),
		((20, 14), 93, 66, 27, 70),
		((20, 15), 88, 72, 16, 81),
		((20, 16), 93, 68, 25, 73),
		((20, 17), 91, 68, 23, 74),
		((20, 18), 87, 73, 14, 83),
		((20, 19), 94, 70, 24, 74),
		((20, 20), 88, 67, 21, 76),
		((20, 21), 88, 68, 20, 77),
		((20, 22), 503, 499, 4, 99),
		((20, 23), 88, 67, 21, 76),
		((20, 24), 92, 68, 24, 73),
		((20, 25), 85, 69, 16, 81),
		((20, 26), 87, 70, 17, 80),
		((20, 27), 86, 70, 16, 81),
		((20, 28), 93, 65, 28, 69),
		((21, 0), 90, 67, 23, 74),
		((21, 1), 85, 66, 19, 77),
		((21, 2), 93, 73, 20, 78),
		((21, 3), 88, 71, 17, 80),
		((21, 4), 94, 71, 23, 75),
		((21, 5), 92, 69, 23, 75),
		((21, 6), 94, 66, 28, 70),
		((21, 7), 94, 65, 29, 69),
		((21, 8), 85, 71, 14, 83),
		((21, 9), 87, 69, 18, 79),
		((21, 10), 86, 68, 18, 79),
		((21, 11), 92, 68, 24, 73),
		((21, 12), 89, 68, 21, 76),
		((21, 13), 88, 73, 15, 82),
		((21, 14), 86, 67, 19, 77),
		((21, 15), 87, 72, 15, 82),
		((21, 16), 87, 70, 17, 80),
		((21, 17), 87, 71, 16, 81),
		((21, 18), 88, 72, 16, 81),
		((21, 19), 93, 65, 28, 69),
		((21, 20), 92, 70, 22, 76),
		((21, 21), 91, 70, 21, 76),
		((21, 22), 510, 493, 17, 96),
		((21, 23), 89, 69, 20, 77),
		((21, 24), 94, 72, 22, 76),
		((21, 25), 91, 70, 21, 76),
		((21, 26), 89, 65, 24, 73),
		((21, 27), 85, 72, 13, 84),
		((21, 28), 93, 72, 21, 77),
		((22, 0), 89, 67, 22, 75),
		((22, 1), 85, 65, 20, 76),
		((22, 2), 93, 64, 29, 68),
		((22, 3), 93, 71, 22, 76),
		((22, 4), 85, 65, 20, 76),
		((22, 5), 85, 67, 18, 78),
		((22, 6), 90, 64, 26, 71),
		((22, 7), 87, 69, 18, 79),
		((22, 8), 94, 72, 22, 76),
		((22, 9), 87, 71, 16, 81),
		((22, 10), 87, 65, 22, 74),
		((22, 11), 93, 72, 21, 77),
		((22, 12), 86, 72, 14, 83),
		((22, 13), 89, 66, 23, 74),
		((22, 14), 90, 67, 23, 74),
		((22, 15), 92, 70, 22, 76),
		((22, 16), 92, 66, 26, 71),
		((22, 17), 91, 66, 25, 72),
		((22, 18), 91, 68, 23, 74),
		((22, 19), 88, 71, 17, 80),
		((22, 20), 90, 69, 21, 76),
		((22, 21), 90, 68, 22, 75),
		((22, 22), 502, 490, 12, 97),
		((22, 23), 91, 67, 24, 73),
		((22, 24), 93, 71, 22, 76),
		((22, 25), 92, 65, 27, 70),
		((22, 26), 93, 69, 24, 74),
		((22, 27), 85, 72, 13, 84),
		((22, 28), 93, 64, 29, 68),
		((23, 0), 92, 73, 19, 79),
		((23, 1), 90, 64, 26, 71),
		((23, 2), 93, 65, 28, 69),
		((23, 3), 88, 72, 16, 81),
		((23, 4), 92, 70, 22, 76),
		((23, 5), 90, 66, 24, 73),
		((23, 6), 86, 66, 20, 76),
		((23, 7), 89, 71, 18, 79),
		((23, 8), 89, 64, 25, 71),
		((23, 9), 90, 64, 26, 71),
		((23, 10), 94, 70, 24, 74),
		((23, 11), 85, 64, 21, 75),
		((23, 12), 86, 66, 20, 76),
		((23, 13), 86, 64, 22, 74),
		((23, 14), 92, 68, 24, 73),
		((23, 15), 94, 70, 24, 74),
		((23, 16), 91, 69, 22, 75),
		((23, 17), 93, 70, 23, 75),
		((23, 18), 87, 65, 22, 74),
		((23, 19), 86, 64, 22, 74),
		((23, 20), 94, 66, 28, 70),
		((23, 21), 92, 64, 28, 69),
		((23, 22), 507, 491, 16, 96),
		((23, 23), 88, 73, 15, 82),
		((23, 24), 87, 69, 18, 79),
		((23, 25), 91, 71, 20, 78),
		((23, 26), 90, 71, 19, 78),
		((23, 27), 87, 70, 17, 80),
		((23, 28), 91, 70, 21, 76),
		((24, 0), 86, 67, 19, 77),
		((24, 1), 94, 67, 27, 71),
		((24, 2), 89, 71, 18, 79),
		((24, 3), 86, 67, 19, 77),
		((24, 4), 87, 73, 14, 83),
		((24, 5), 86, 64, 22, 74),
		((24, 6), 92, 68, 24, 73),
		((24, 7), 85, 68, 17, 80),
		((24, 8), 86, 65, 21, 75),
		((24, 9), 87, 73, 14, 83),
		((24, 10), 91, 68, 23, 74),
		((24, 11), 94, 67, 27, 71),
		((24, 12), 94, 67, 27, 71),
		((24, 13), 88, 71, 17, 80),
		((24, 14), 91, 70, 21, 76),
		((24, 15), 89, 72, 17, 80),
		((24, 16), 92, 69, 23, 75),
		((24, 17), 87, 70, 17, 80),
		((24, 18), 94, 69, 25, 73),
		((24, 19), 91, 66, 25, 72),
		((24, 20), 90, 64, 26, 71),
		((24, 21), 86, 65, 21, 75),
		((24, 22), 508, 494, 14, 97),
		((24, 23), 89, 72, 17, 80),
		((24, 24), 94, 66, 28, 70),
		((24, 25), 88, 64, 24, 72),
		((24, 26), 86, 64, 22, 74),
		((24, 27), 92, 65, 27, 70),
		((24, 28), 89, 72, 17, 80),
		((25, 0), 93, 70, 23, 75),
		((25, 1), 91, 73, 18, 80),
		((25, 2), 89, 65, 24, 73),
		((25, 3), 86, 69, 17, 80),
		((25, 4), 90, 70, 20, 77),
		((25, 5), 89, 65, 24, 73),
		((25, 6), 92, 71, 21, 77),
		((25, 7), 91, 65, 26, 71),
		((25, 8), 91, 67, 24, 73),
		((25, 9), 94, 73, 21, 77),
		((25, 10), 94, 73, 21, 77),
		((25, 11), 91, 70, 21, 76),
		((25, 12), 91, 71, 20, 78),
		((25, 13), 86, 67, 19, 77),
		((25, 14), 88, 67, 21, 76),
		((25, 15), 90, 67, 23, 74),
		((25, 16), 92, 64, 28, 69),
		((25, 17), 94, 68, 26, 72),
		((25, 18), 87, 73, 14, 83),
		((25, 19), 86, 73, 13, 84),
		((25, 20), 92, 72, 20, 78),
		((25, 21), 93, 73, 20, 78),
		((25, 22), 504, 491, 13, 97),
		((25, 23), 91, 72, 19, 79),
		((25, 24), 85, 70, 15, 82),
		((25, 25), 85, 73, 12, 85),
		((25, 26), 85, 67, 18, 78),
		((25, 27), 89, 69, 20, 77),
		((25, 28), 86, 66, 20, 76),
		((26, 0), 91, 72, 19, 79),
		((26, 1), 86, 68, 18, 79),
		((26, 2), 88, 70, 18, 79),
		((26, 3), 88, 66, 22, 75),
		((26, 4), 85, 71, 14, 83),
		((26, 5), 90, 66, 24, 73),
		((26, 6), 90, 66, 24, 73),
		((26, 7), 89, 73, 16, 82),
		((26, 8), 85, 65, 20, 76),
		((26, 9), 90, 72, 18, 80),
		((26, 10), 86, 64, 22, 74),
		((26, 11), 90, 64, 26, 71),
		((26, 12), 92, 73, 19, 79),
		((26, 13), 85, 72, 13, 84),
		((26, 14), 91, 73, 18, 80),
		((26, 15), 92, 69, 23, 75),
		((26, 16), 90, 72, 18, 80),
		((26, 17), 90, 68, 22, 75),
		((26, 18), 90, 73, 17, 81),
		((26, 19), 94, 64, 30, 68),
		((26, 20), 86, 73, 13, 84),
		((26, 21), 86, 66, 20, 76),
		((26, 22), 510, 491, 19, 96),
		((26, 23), 87, 66, 21, 75),
		((26, 24), 91, 64, 27, 70),
		((26, 25), 94, 66, 28, 70),
		((26, 26), 85, 68, 17, 80),
		((26, 27), 85, 71, 14, 83),
		((26, 28), 94, 64, 30, 68),
		((27, 0), 88, 73, 15, 82),
		((27, 1), 94, 67, 27, 71),
		((27, 2), 90, 73, 17, 81),
		((27, 3), 93, 71, 22, 76),
		((27, 4), 89, 70, 19, 78),
		((27, 5), 90, 66, 24, 73),
		((27, 6), 87, 73, 14, 83),
		((27, 7), 87, 66, 21, 75),
		((27, 8), 86, 69, 17, 80),
		((27, 9), 88, 73, 15, 82),
		((27, 10), 92, 64, 28, 69),
		((27, 11), 87, 69, 18, 79),
		((27, 12), 91, 64, 27, 70),
		((27, 13), 94, 68, 26, 72),
		((27, 14), 89, 68, 21, 76),
		((27, 15), 87, 67, 20, 77),
		((27, 16), 90, 72, 18, 80),
		((27, 17), 94, 65, 29, 69),
		((27, 18), 90, 72, 18, 80),
		((27, 19), 88, 73, 15, 82),
		((27, 20), 88, 71, 17, 80),
		((27, 21), 88, 64, 24, 72),
		((27, 22), 504, 490, 14, 97),
		((27, 23), 93, 66, 27, 70),
		((27, 24), 85, 67, 18, 78),
		((27, 25), 94, 64, 30, 68),
		((27, 26), 85, 72, 13, 84),
		((27, 27), 85, 73, 12, 85),
		((27, 28), 89, 70, 19, 78),
		((28, 0), 93, 66, 27, 70),
		((28, 1), 86, 71, 15, 82),
		((28, 2), 94, 73, 21, 77),
		((28, 3), 91, 72, 19, 79),
		((28, 4), 87, 69, 18, 79),
		((28, 5), 85, 70, 15, 82),
		((28, 6), 85, 72, 13, 84),
		((28, 7), 89, 72, 17, 80),
		((28, 8), 90, 73, 17, 81),
		((28, 9), 94, 64, 30, 68),
		((28, 10), 85, 73, 12, 85),
		((28, 11), 89, 70, 19, 78),
		((28, 12), 94, 67, 27, 71),
		((28, 13), 87, 68, 19, 78),
		((28, 14), 94, 72, 22, 76),
		((28, 15), 92, 66, 26, 71),
		((28, 16), 91, 64, 27, 70),
		((28, 17), 86, 69, 17, 80),
		((28, 18), 88, 69, 19, 78),
		((28, 19), 90, 70, 20, 77),
		((28, 20), 89, 69, 20, 77),
		((28, 21), 90, 67, 23, 74),
		((28, 22), 506, 491, 15, 97),
		((28, 23), 89, 70, 19, 78),
		((28, 24), 90, 73, 17, 81),
		((28, 25), 86, 65, 21, 75),
		((28, 26), 93, 73, 20, 78),
		((28, 27), 88, 69, 19, 78),
		((28, 28), 92, 68, 24, 73),
		((29, 0), 88, 70, 18, 79),
		((29, 1), 89, 68, 21, 76),
		((29, 2), 85, 73, 12, 85),
		((29, 3), 89, 73, 16, 82),
		((29, 4), 86, 68, 18, 79),
		((29, 5), 91, 70, 21, 76),
		((29, 6), 86, 70, 16, 81),
		((29, 7), 86, 64, 22, 74),
		((29, 8), 90, 73, 17, 81),
		((29, 9), 92, 65, 27, 70),
		((29, 10), 89, 72, 17, 80),
		((29, 11), 85, 66, 19, 77),
		((29, 12), 89, 73, 16, 82),
		((29, 13), 90, 72, 18, 80),
		((29, 14), 86, 69, 17, 80),
		((29, 15), 85, 64, 21, 75),
		((29, 16), 88, 69, 19, 78),
		((29, 17), 92, 64, 28, 69),
		((29, 18), 86, 65, 21, 75),
		((29, 19), 92, 70, 22, 76),
		((29, 20), 94, 64, 30, 68),
		((29, 21), 87, 64, 23, 73),
		((29, 22), 509, 497, 12, 97),
		((29, 23), 91, 67, 24, 73),
		((29, 24), 90, 67, 23, 74),
		((29, 25), 86, 65, 21, 75),
		((29, 26), 94, 68, 26, 72),
		((29, 27), 89, 69, 20, 77),
		((29, 28), 87, 71, 16, 81),
		((30, 0), 92, 64, 28, 69),
		((30, 1), 93, 67, 26, 72),
		((30, 2), 93, 66, 27, 70),
		((30, 3), 93, 67, 26, 72),
		((30, 4), 86, 70, 16, 81),
		((30, 5), 91, 67, 24, 73),
		((30, 6), 89, 66, 23, 74),
		((30, 7), 89, 72, 17, 80),
		((30, 8), 93, 69, 24, 74),
		((30, 9), 94, 68, 26, 72),
		((30, 10), 89, 69, 20, 77),
		((30, 11), 94, 64, 30, 68),
		((30, 12), 93, 65, 28, 69),
		((30, 13), 85, 72, 13, 84),
		((30, 14), 88, 68, 20, 77),
		((30, 15), 94, 64, 30, 68),
		((30, 16), 92, 73, 19, 79),
		((30, 17), 92, 73, 19, 79),
		((30, 18), 87, 68, 19, 78),
		((30, 19), 93, 64, 29, 68),
		((30, 20), 94, 67, 27, 71),
		((30, 21), 89, 67, 22, 75),
		((30, 22), 507, 491, 16, 96),
		((30, 23), 91, 64, 27, 70),
		((30, 24), 87, 65, 22, 74),
		((30, 25), 85, 65, 20, 76),
		((30, 26), 91, 68, 23, 74),
		((30, 27), 90, 67, 23, 74),
		((30, 28), 94, 66, 28, 70),
		((31, 0), 92, 67, 25, 72),
		((31, 1), 93, 68, 25, 73),
		((31, 2), 92, 66, 26, 71),
		((31, 3), 89, 64, 25, 71),
		((31, 4), 90, 71, 19, 78),
		((31, 5), 89, 68, 21, 76),
		((31, 6), 85, 72, 13, 84),
		((31, 7), 88, 65, 23, 73),
		((31, 8), 86, 66, 20, 76),
		((31, 9), 90, 72, 18, 80),
		((31, 10), 86, 67, 19, 77),
		((31, 11), 89, 72, 17, 80),
		((31, 12), 90, 73, 17, 81),
		((31, 13), 91, 70, 21, 76),
		((31, 14), 94, 67, 27, 71),
		((31, 15), 94, 73, 21, 77),
		((31, 16), 86, 71, 15, 82),
		((31, 17), 86, 73, 13, 84),
		((31, 18), 89, 65, 24, 73),
		((31, 19), 86, 72, 14, 83),
		((31, 20), 88, 64, 24, 72),
		((31, 21), 90, 64, 26, 71),
		((31, 22), 505, 496, 9, 98),
		((31, 23), 90, 73, 17, 81),
		((31, 24), 91, 73, 18, 80),
		((31, 25), 94, 69, 25, 73),
		((31, 26), 92, 64, 28, 69),
		((31, 27), 91, 66, 25, 72),
		((31, 28), 85, 65, 20, 76),
		((32, 0), 85, 69, 16, 81),
		((32, 1), 93, 67, 26, 72),
		((32, 2), 93, 73, 20, 78),
		((32, 3), 94, 71, 23, 75),
		((32, 4), 90, 70, 20, 77),
		((32, 5), 92, 68, 24, 73),
		((32, 6), 94, 64, 30, 68),
		((32, 7), 86, 72, 14, 83),
		((32, 8), 85, 73, 12, 85),
		((32, 9), 89, 69, 20, 77),
		((32, 10), 89, 73, 16, 82),
		((32, 11), 87, 65, 22, 74),
		((32, 12), 94, 67, 27, 71),
		((32, 13), 93, 67, 26, 72),
		((32, 14), 93, 66, 27, 70),
		((32, 15), 86, 72, 14, 83),
		((32, 16), 89, 69, 20, 77),
		((32, 17), 93, 67, 26, 72),
		((32, 18), 87, 64, 23, 73),
		((32, 19), 85, 69, 16, 81),
		((32, 20), 85, 69, 16, 81),
		((32, 21), 91, 65, 26, 71),
		((32, 22), 503, 491, 12, 97),
		((32, 23), 94, 71, 23, 75),
		((32, 24), 87, 64, 23, 73),
		((32, 25), 91, 73, 18, 80),
		((32, 26), 93, 67, 26, 72),
		((32, 27), 86, 71, 15, 82),
		((32, 28), 91, 64, 27, 70),
		((33, 0), 86, 73, 13, 84),
		((33, 1), 88, 71, 17, 80),
		((33, 2), 90, 66, 24, 73),
		((33, 3), 85, 64, 21, 75),
		((33, 4), 87, 66, 21, 75),
		((33, 5), 91, 68, 23, 74),
		((33, 6), 93, 68, 25, 73),
		((33, 7), 92, 70, 22, 76),
		((33, 8), 91, 64, 27, 70),
		((33, 9), 85, 72, 13, 84),
		((33, 10), 89, 65, 24, 73),
		((33, 11), 91, 66, 25, 72),
		((33, 12), 87, 68, 19, 78),
		((33, 13), 89, 70, 19, 78),
		((33, 14), 86, 68, 18, 79),
		((33, 15), 85, 69, 16, 81),
		((33, 16), 94, 66, 28, 70),
		((33, 17), 92, 68, 24, 73),
		((33, 18), 88, 72, 16, 81),
		((33, 19), 90, 73, 17, 81),
		((33, 20), 89, 64, 25, 71),
		((33, 21), 92, 71, 21, 77),
		((33, 22), 502, 497, 5, 99),
		((33, 23), 94, 67, 27, 71),
		((33, 24), 93, 64, 29, 68),
		((33, 25), 90, 66, 24, 73),
		((33, 26), 87, 72, 15, 82),
		((33, 27), 85, 73, 12, 85),
		((33, 28), 86, 72, 14, 83),
		((34, 0), 89, 66, 23, 74),
		((34, 1), 94, 64, 30, 68),
		((34, 2), 92, 69, 23, 75),
		((34, 3), 93, 70, 23, 75),
		((34, 4), 88, 64, 24, 72),
		((34, 5), 94, 67, 27, 71),
		((34, 6), 89, 68, 21, 76),
		((34, 7), 94, 71, 23, 75),
		((34, 8), 88, 69, 19, 78),
		((34, 9), 89, 72, 17, 80),
		((34, 10), 90, 69, 21, 76),
		((34, 11), 91, 65, 26, 71),
		((34, 12), 88, 69, 19, 78),
		((34, 13), 90, 69, 21, 76),
		((34, 14), 92, 66, 26, 71),
		((34, 15), 94, 70, 24, 74),
		((34, 16), 87, 69, 18, 79),
		((34, 17), 86, 67, 19, 77),
		((34, 18), 94, 66, 28, 70),
		((34, 19), 94, 69, 25, 73),
		((34, 20), 91, 67, 24, 73),
		((34, 21), 87, 72, 15, 82),
		((34, 22), 501, 495, 6, 98),
		((34, 23), 93, 71, 22, 76),
		((34, 24), 92, 73, 19, 79),
		((34, 25), 90, 73, 17, 81),
		((34, 26), 89, 69, 20, 77),
		((34, 27), 89, 72, 17, 80),
		((34, 28), 87, 66, 21, 75)
	]


	let part = 2

	if part == 1
	{
		var viable: (Node, Node)[]
		var cnt = 0

		var x = 0
		while x < input.length
		{
			if input[x].3 > 66
			{
				cnt += 1
			}

			var y = 0
			while y < input.length
			{
				if x != y
				{
					let a = input[x]
					let b = input[y]

					if a.2 <= b.3 && a.2 > 0
					{
						viable += (Node(a.0, a.1, a.2, a.3), Node(b.0, b.1, b.2, b.3))
					}
				}

				y += 1
			}

			x += 1
		}

		printf("%d\n", cnt)
		printf("number: %d\n", viable.length)
	}
	else
	{
		// bah.
		// make a 2d array of nodes

		var maxx = 0
		var maxy = 0

		var k = 0
		while k < input.length
		{
			if (input[k].0).0 > maxx
			{
				maxx = (input[k].0).0
			}

			if (input[k].0).1 > maxy
			{
				maxy = (input[k].0).1
			}


			if input[k].3 > Q.maxFree
			{
				Q.maxFree = input[k].3
			}

			if input[k].2 == 0
			{
				Q.empty = Node(input[k].0, input[k].1, input[k].2, input[k].3)
			}


			k += 1
		}

		maxx += 1
		maxy += 1

		Q.dimX = maxx
		Q.dimY = maxy

		Q.nodeList = alloc[maxx][maxy] Node
		printf("dims: %dx%d\n", maxx, maxy)

		// fill it up
		k = 0
		while k < input.length
		{
			let n = input[k]
			Q.nodeList[(n.0).0][(n.0).1] = Node(n.0, n.1, n.2, n.3)
			k += 1
		}

		Q.goal = Q.nodeList[maxx - 1][0]


		// ok -- first, get the number of steps to move the empty node to LEFT of goal
		var total = 0

		let actualGoal = Q.nodeList[maxx - 2][0]
		total += aStarSearch(Q.empty, actualGoal).nodes.length - 1

		// then, swap the goal and the empty
		total += 1

		// then, the arrangement is now this: X..........G_
		// distance to get from G to the next to the start is maxx - 3
		// amount of steps to move 1 tile is 5
		/*
			..G_.
			.....

			..G..
			..._.

			..G..
			.._..

			..G..
			._...

			._G..
			.....

			.G_..
			.....

			and repeat
		*/

		total += (maxx - 3) * 5


		// now we have this:
		/*
			XG_..
			.....

			1. move empty to below source -- 3 moves

			XG...
			_....

			2. swap source data and empty -- 1 move

			_G
			X.

			3. swap G and empty -- 1 move
		*/

		total += 5

		printf("number of moves: %d\n", total)





		/*
			manual:
			move from original _ to LEFT OF GOAL
			7 (left) + 28 (up) + 32 (right)

			1 move to get goal and empty to swap
			5 moves to get goal forward 1 slot
			32 steps left brings it right next to the source -- 5 * 32 = 160
			160 + 1 + 67 so far

			first 2 rows:
			X*_................................
			..................................

			5 moves to finish.

			160 + 1 + 67 + 5 = 226


			..................................*
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			...................................
			..#################################
			...................................
			...................................
			...................................
			...................................
			...................................
			........_..........................

		*/
	}
}





func find<T>(arr: T[], x: T) -> int
{
	var i = 0
	while i < arr.length
	{
		if arr[i] == x
		{
			return i
		}

		i += 1
	}

	return -1
}



struct Node
{
	var pos: (int, int)
	var size: int
	var used: int
	var free: int
}

operator == (a: Node, b: Node) -> bool
{
	a.pos == b.pos
}



// graph structures
class Path
{
	var weight: int
	var nodes: Node[]

	init(w: int, n: Node)
	{
		self.weight = w
		self.nodes += n
	}

	init(w: int, ns: Node[])
	{
		self.weight = w
		self.nodes = ns
	}
}


func isFull(n: Node) -> bool
{
	// if the used is > free space
	return n.used > Q.maxFree
}

func getNeighbours(n: Node) -> Node[]
{
	var ns: Node[]

	// up
	if n.pos.1 > 0 && !isFull(Q.nodeList[n.pos.0][n.pos.1 - 1])// && (n.pos.0, n.pos.1 - 1) != (0, 0)
	{
		ns += Q.nodeList[n.pos.0][n.pos.1 - 1]
	}

	// down
	if n.pos.1 < Q.dimY - 1 && !isFull(Q.nodeList[n.pos.0][n.pos.1 + 1])// && (n.pos.0, n.pos.1 + 1) != (0, 0)
	{
		ns += Q.nodeList[n.pos.0][n.pos.1 + 1]
	}

	// left
	if n.pos.0 > 0 && !isFull(Q.nodeList[n.pos.0 - 1][n.pos.1])// && (n.pos.0 - 1, n.pos.1) != (0, 0)
	{
		ns += Q.nodeList[n.pos.0 - 1][n.pos.1]
	}

	// right
	if n.pos.0 < Q.dimX - 1 && !isFull(Q.nodeList[n.pos.0 + 1][n.pos.1])// && (n.pos.0 + 1, n.pos.1) != (0, 0)
	{
		ns += Q.nodeList[n.pos.0 + 1][n.pos.1]
	}

	return ns
}

// straight line distance to destination
func getSLDist(pos: (int, int), goal: (int, int)) -> int
{
	return Math.√(Math.square(pos.0 - goal.0) + Math.square(pos.1 - goal.1)) as int
}

func sortByWeight(a: Path, b: Path) -> bool
{
	return a.weight > b.weight
}

func didAlreadyVisit(v: Node[], n: Node) -> bool
{
	var k = 0
	while k < v.length
	{
		if v[k] == n { return true }
		k += 1
	}

	return false
}

func aStarSearch(start: Node, goal: Node) -> Path
{
	var queue: Path[]
	var visited: Node[]


	// initial path
	// weight is current length (0) + straight line distance

	queue += Path(getSLDist(start.pos, goal.pos), start)
	visited += start

	while queue.length > 0
	{
		let path = queue.popBack()
		assert(path.nodes.length > 0)

		// ok, get the last node -- this is the one we check for neighbours
		let n = path.nodes.back()
		let nodes = getNeighbours(n)

		var k = 0
		while k < nodes.length
		{
			// see if the node *is* the solution
			let nd = nodes[k]

			if !didAlreadyVisit(visited, nd)
			{
				visited += nd

				// printf("node: (%d, %d)\n", nd.pos.0, nd.pos.1)

				// the "length" of a path is simply the number of nodes, since
				// we're operating on a grid system
				var newp = Path(path.nodes.length + getSLDist(nd.pos, goal.pos), path.nodes + nd)

				if nd.pos == goal.pos
				{
					return newp
				}

				// guess not.
				// add the paths back into the queue
				queue += newp
			}

			k += 1
		}

		// sort the queue
		queue = mergeSort(queue, sortByWeight)
	}

	// did not return -- queue became empty at some point
	printf("fail\n")
	abort()

	// unreachable anyway
	return Path()
}























// merge sort


func split<T>(s: T[]) -> (T[], T[])
{
	let div = s.length / 2

	var a: T[]
	var b: T[]
	var i = 0

	while i < div
	{
		a += s[i]
		i += 1
	}

	while i < s.length
	{
		b += s[i]
		i += 1
	}

	return (a, b)
}

func _merge<T>(a: T[], b: T[], cmp: [(T, T) -> bool]) -> T[]
{
	var ret: T[]

	var al = a.length
	var bl = b.length

	while al > 0 && bl > 0
	{
		let ai = a.length - al
		let bi = b.length - bl

		if(cmp(a[ai], b[bi]))
		{
			ret += a[ai]
			al -= 1
		}
		else
		{
			ret += b[bi]
			bl -= 1
		}
	}

	while al > 0
	{
		ret += a[a.length - al]
		al -= 1
	}

	while bl > 0
	{
		ret += b[b.length - bl]
		bl -= 1
	}

	return ret
}

func mergeSort<T>(arr: T[], cmp: [(T, T) -> bool]) -> T[]
{
	if arr.length <= 1
	{
		return arr
	}
	else
	{
		let a = split(arr)
		let a0 = mergeSort(a.0, cmp)
		let a1 = mergeSort(a.1, cmp)
		return _merge(a0, a1, cmp)
	}
}

