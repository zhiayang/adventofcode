// prog.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation

public func main()
{
	let input = [
		"rect 1x1",
		"rotate row y=0 by 7",
		"rect 1x1",
		"rotate row y=0 by 5",
		"rect 1x1",
		"rotate row y=0 by 5",
		"rect 1x1",
		"rotate row y=0 by 2",
		"rect 1x1",
		"rotate row y=0 by 3",
		"rect 1x1",
		"rotate row y=0 by 5",
		"rect 1x1",
		"rotate row y=0 by 3",
		"rect 1x1",
		"rotate row y=0 by 2",
		"rect 1x1",
		"rotate row y=0 by 3",
		"rect 2x1",
		"rotate row y=0 by 7",
		"rect 6x1",
		"rotate row y=0 by 3",
		"rect 2x1",
		"rotate row y=0 by 2",
		"rect 1x2",
		"rotate row y=1 by 10",
		"rotate row y=0 by 3",
		"rotate column x=0 by 1",
		"rect 2x1",
		"rotate column x=20 by 1",
		"rotate column x=15 by 1",
		"rotate column x=5 by 1",
		"rotate row y=1 by 5",
		"rotate row y=0 by 2",
		"rect 1x2",
		"rotate row y=0 by 5",
		"rotate column x=0 by 1",
		"rect 4x1",
		"rotate row y=2 by 15",
		"rotate row y=0 by 5",
		"rotate column x=0 by 1",
		"rect 4x1",
		"rotate row y=2 by 5",
		"rotate row y=0 by 5",
		"rotate column x=0 by 1",
		"rect 4x1",
		"rotate row y=2 by 10",
		"rotate row y=0 by 10",
		"rotate column x=8 by 1",
		"rotate column x=5 by 1",
		"rotate column x=0 by 1",
		"rect 9x1",
		"rotate column x=27 by 1",
		"rotate row y=0 by 5",
		"rotate column x=0 by 1",
		"rect 4x1",
		"rotate column x=42 by 1",
		"rotate column x=40 by 1",
		"rotate column x=22 by 1",
		"rotate column x=17 by 1",
		"rotate column x=12 by 1",
		"rotate column x=7 by 1",
		"rotate column x=2 by 1",
		"rotate row y=3 by 10",
		"rotate row y=2 by 5",
		"rotate row y=1 by 3",
		"rotate row y=0 by 10",
		"rect 1x4",
		"rotate column x=37 by 2",
		"rotate row y=3 by 18",
		"rotate row y=2 by 30",
		"rotate row y=1 by 7",
		"rotate row y=0 by 2",
		"rotate column x=13 by 3",
		"rotate column x=12 by 1",
		"rotate column x=10 by 1",
		"rotate column x=7 by 1",
		"rotate column x=6 by 3",
		"rotate column x=5 by 1",
		"rotate column x=3 by 3",
		"rotate column x=2 by 1",
		"rotate column x=0 by 1",
		"rect 14x1",
		"rotate column x=38 by 3",
		"rotate row y=3 by 12",
		"rotate row y=2 by 10",
		"rotate row y=0 by 10",
		"rotate column x=7 by 1",
		"rotate column x=5 by 1",
		"rotate column x=2 by 1",
		"rotate column x=0 by 1",
		"rect 9x1",
		"rotate row y=4 by 20",
		"rotate row y=3 by 25",
		"rotate row y=2 by 10",
		"rotate row y=0 by 15",
		"rotate column x=12 by 1",
		"rotate column x=10 by 1",
		"rotate column x=8 by 3",
		"rotate column x=7 by 1",
		"rotate column x=5 by 1",
		"rotate column x=3 by 3",
		"rotate column x=2 by 1",
		"rotate column x=0 by 1",
		"rect 14x1",
		"rotate column x=34 by 1",
		"rotate row y=1 by 45",
		"rotate column x=47 by 1",
		"rotate column x=42 by 1",
		"rotate column x=19 by 1",
		"rotate column x=9 by 2",
		"rotate row y=4 by 7",
		"rotate row y=3 by 20",
		"rotate row y=0 by 7",
		"rotate column x=5 by 1",
		"rotate column x=3 by 1",
		"rotate column x=2 by 1",
		"rotate column x=0 by 1",
		"rect 6x1",
		"rotate row y=4 by 8",
		"rotate row y=3 by 5",
		"rotate row y=1 by 5",
		"rotate column x=5 by 1",
		"rotate column x=4 by 1",
		"rotate column x=3 by 2",
		"rotate column x=2 by 1",
		"rotate column x=1 by 3",
		"rotate column x=0 by 1",
		"rect 6x1",
		"rotate column x=36 by 3",
		"rotate column x=25 by 3",
		"rotate column x=18 by 3",
		"rotate column x=11 by 3",
		"rotate column x=3 by 4",
		"rotate row y=4 by 5",
		"rotate row y=3 by 5",
		"rotate row y=2 by 8",
		"rotate row y=1 by 8",
		"rotate row y=0 by 3",
		"rotate column x=3 by 4",
		"rotate column x=0 by 4",
		"rect 4x4",
		"rotate row y=4 by 10",
		"rotate row y=3 by 20",
		"rotate row y=1 by 10",
		"rotate row y=0 by 10",
		"rotate column x=8 by 1",
		"rotate column x=7 by 1",
		"rotate column x=6 by 1",
		"rotate column x=5 by 1",
		"rotate column x=3 by 1",
		"rotate column x=2 by 1",
		"rotate column x=1 by 1",
		"rotate column x=0 by 1",
		"rect 9x1",
		"rotate row y=0 by 40",
		"rotate column x=44 by 1",
		"rotate column x=35 by 5",
		"rotate column x=18 by 5",
		"rotate column x=15 by 3",
		"rotate column x=10 by 5",
		"rotate row y=5 by 15",
		"rotate row y=4 by 10",
		"rotate row y=3 by 40",
		"rotate row y=2 by 20",
		"rotate row y=1 by 45",
		"rotate row y=0 by 35",
		"rotate column x=48 by 1",
		"rotate column x=47 by 5",
		"rotate column x=46 by 5",
		"rotate column x=45 by 1",
		"rotate column x=43 by 1",
		"rotate column x=40 by 1",
		"rotate column x=38 by 2",
		"rotate column x=37 by 3",
		"rotate column x=36 by 2",
		"rotate column x=32 by 2",
		"rotate column x=31 by 2",
		"rotate column x=28 by 1",
		"rotate column x=23 by 3",
		"rotate column x=22 by 3",
		"rotate column x=21 by 5",
		"rotate column x=20 by 1",
		"rotate column x=18 by 1",
		"rotate column x=17 by 3",
		"rotate column x=13 by 1",
		"rotate column x=10 by 1",
		"rotate column x=8 by 1",
		"rotate column x=7 by 5",
		"rotate column x=6 by 5",
		"rotate column x=5 by 1",
		"rotate column x=3 by 5",
		"rotate column x=2 by 5",
		"rotate column x=1 by 5"
	]


	var screen: bool[50][6]

	var i = 0
	while i < input.length
	{
		let instr = input[i]
		if instr.find("rect") == 0
		{
			let s = instr.substring(5, -1)
			let k = s.find("x")

			let x = parseNum(s.substring(0, k))
			let y = parseNum(s.substring(k + 1, -1))

			// make the rect
			makeRect(&screen, x, y)
		}
		else if instr.find("rotate row y=") == 0
		{
			let s = instr.substring(13, -1)
			let b = s.find(" by")

			let row = parseNum(s.substring(0, b))
			let amt = parseNum(s.substring(b + 4, -1))

			shiftRow(&screen, row, amt)
		}
		else if instr.find("rotate column x=") == 0
		{
			let s = instr.substring(16, -1)
			let b = s.find(" by")

			let col = parseNum(s.substring(0, b))
			let amt = parseNum(s.substring(b + 4, -1))

			shiftCol(&screen, col, amt)
		}

		i += 1
	}

	var count = 0
	var y = 0
	while y < 6
	{
		var x = 0
		while x < 50
		{
			if screen[y][x] { printf("*"); count += 1 }
			else { printf(" ") }
			x += 1
		}
		printf("\n")

		y += 1
	}
	printf("\ncount = %d\n", count)
}



func makeRect(_scr: bool[50][6]*, x: int, y: int)
{
	var scr = _scr

	var i = 0	// y
	while i < y
	{
		var j = 0	// x
		while j < x
		{
			(*scr)[i][j] = true
			j += 1
		}
		i += 1
	}
}

func shiftCol(_scr: bool[50][6]*, col: int, amt: int)
{
	// do it the normal (iterative) way
	var tmp: bool[]

	var scr = _scr

	// save the bottom "amt" of pixels
	var i = 6 - amt
	while i < 6
	{
		tmp.append((*scr)[i][col])
		i += 1
	}

	// move everything down
	// start from the bottom
	i = 5
	while i >= 0
	{
		(*scr)[i][col] = (*scr)[i - amt][col]
		i -= 1
	}

	// set the top
	i = 0
	while i < tmp.length
	{
		(*scr)[i][col] = tmp[i]
		i += 1
	}
}

func shiftRow(scr: bool[50][6]*, row: int, amt: int)
{
	var row = &((*scr)[row])
	var rowi: u64 = 0

	var i = 0
	while i < 50
	{
		rowi |= (*row)[i] as u64
		rowi <<= 1
		i += 1
	}

	rowi >>= 1
	rowi = (rowi >> amt) | (rowi << (50 - amt))

	// make it.
	i = 49
	while i >= 0
	{
		(*row)[i] = (rowi & 1) as bool
		rowi >>= 1
		i -= 1
	}
}



func parseNum(s: string) -> int
{
	if s.length == 0 { return 0 }
	else if s.length == 1 { return s[0] as int - 48 }

	var ret = 0
	var i = s.length - 1
	var pos = 1

	while i >= 0
	{
		ret = pos * (s[i] as int - 48) + ret

		i -= 1
		pos *= 10
	}

	return ret
}












