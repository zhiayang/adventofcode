// prog.cpp
// Copyright (c) 2018, zhiayang
// Licensed under the Apache License Version 2.0.

#include "assert.h"

#include <map>
#include <set>
#include <list>
#include <stack>
#include <array>
#include <deque>
#include <string>
#include <vector>
#include <fstream>
#include <functional>
#include <unordered_set>

#include "utils.h"
#include "tinyformat.h"

#define DIM_X 50
#define DIM_Y 50

char& get(std::string& map, int x, int y)
{
	return map[x + y*DIM_X];
}

char get(const std::string& map, int x, int y)
{
	return map[x + y*DIM_X];
}

std::vector<char> adjacents(const std::string& map, int x, int y)
{
	std::vector<char> ret;
	if(x > 0)
	{
		// add the left edge.
		ret.push_back(get(map, x - 1, y));
		if(y > 0)           ret.push_back(get(map, x - 1, y - 1));
		if(y < DIM_Y - 1)   ret.push_back(get(map, x - 1, y + 1));
	}

	if(x < DIM_X - 1)
	{
		ret.push_back(get(map, x + 1, y));
		if(y > 0)           ret.push_back(get(map, x + 1, y - 1));
		if(y < DIM_Y - 1)   ret.push_back(get(map, x + 1, y + 1));
	}

	if(y > 0)           ret.push_back(get(map, x, y - 1));
	if(y < DIM_Y - 1)   ret.push_back(get(map, x, y + 1));

	return ret;
}

int run(std::string map, int limit)
{
	std::unordered_map<std::string, int> seen;

	for(int i = 0; i < limit; i++)
	{
		auto copy = map;
		for(int y = 0; y < DIM_Y; y++)
		{
			for(int x = 0; x < DIM_X; x++)
			{
				auto surr = adjacents(map, x, y);

				int num_trees = std::count(surr.begin(), surr.end(), '|');
				int num_yards = std::count(surr.begin(), surr.end(), '#');
				int num_opens = std::count(surr.begin(), surr.end(), '.');

				auto& cur = get(copy, x, y);
				if(cur == '.' && num_trees >= 3)
					cur = '|';

				else if(cur == '|' && num_yards >= 3)
					cur = '#';

				else if(cur == '#')
				{
					if(num_yards > 0 && num_trees > 0)
					{
						// remain
					}
					else
					{
						cur = '.';
					}
				}
			}
		}

		map = copy;
		if(auto it = seen.find(map); it != seen.end())
		{
			int d = i - it->second;
			while(i + d < limit)
				i += d;
		}
		else
		{
			seen[map] = i;
		}

		// tfm::printfln("t = %d", i);
	}

	int num_yards = 0;
	int num_trees = 0;
	for(int y = 0; y < DIM_Y; y++)
	{
		for(int x = 0; x < DIM_X; x++)
		{
			if(get(map, x, y) == '|')
				num_trees++;

			else if(get(map, x, y) == '#')
				num_yards++;
		}
	}

	return num_trees * num_yards;
}

int main()
{
	// std::string map =
	// "|#..|#...|..|.#..|###|.....#.|.......||#..|....||."
	// "#||..##.#........||#...##.|..###.|.||...|.#.|.|.#."
	// "##.#.###....##....|..||#.||##.|.###|........||.##."
	// "#.|.||#...|..####......|.#|#..#.#|##...||..#..|..."
	// ".....#..#.|.####..#..#...|||...||.|...#......#..|."
	// ".|..#..#.......|...#.|...|.##....|#|..#|###..#..#."
	// ".##..#..##..|.#|||.##..|..#.##..|....#..#|.##|.|#."
	// "|#..|#...|...|.|.......#.#......|...|.#.|||.|||#.#"
	// "|....#...|..#..#.....#.|..#.#..|#|.#|...|..|#..|#|"
	// ".#...##..|#.##......##...#|||..|.....#.|..|...|..#"
	// "#.....|..|...||.|.|.....|....#|..|#...#|...#.....#"
	// "...|...###.||......|..#|..|...|.##|........#|#|..|"
	// "|.|.#.#......||#|||..|#....|#.|...#|..|.|.#|#.|.|."
	// "###.#.|....|.......##.#|###.|#.#..#.|.#...#...###."
	// "|###...|.....#.|.##..#...|#.#.|.##.#........#..|.."
	// "|.||.|...##...##|......#..|.##.##|..#..|#..#.##..."
	// "#....|#.....|...|...|............#..#|.....|.#.|.#"
	// "...#..|..|||#.|.......#|...#...##|.......####.|..."
	// ".#..|..#..|....||#.##.....|||...#..|.#..|.#..|..##"
	// "....#...##.........#....|..#.......#...|.....##.#."
	// "|...|...|....#|####||###..|.|..|.||.#......#.|#..."
	// ".#.#|.|.|....#.....||...||..|...##.#..|.|.#......|"
	// "..|.......|||.|..#.#......|.|..##.||....|###....#."
	// "##....#.......#.|#.##.........|.|....#...|.#|.|.#|"
	// "|#.##...|||||#.##.#...#.|#...|.||.|...|..#...#..|."
	// "...#||..#.......||..|.###.#.|#......||..|.#.....#."
	// "#..|.||#.#...|..........#.....#...#...###||.#....."
	// "#..#.|###|#|..|##...##.#......#|.#.#|..#.......|#."
	// ".|.....|.|..#.###|.#|.##.....|.|..|..|..#..|...##."
	// ".|........#...#..|.|..||#....|....#..|.|........|#"
	// "....#.|...#|||...#......#...##......|#....#.||.#.."
	// ".|.....|....#......#.|#.|.|.|..#.#.|..##.#||.....#"
	// ".....#...|.#|..#..#|#.#|.|..|.#........#|..#|....#"
	// "|.||..##...|#.#||..|..#.|..|..#..|..#.|.#|.#...|#."
	// "...|#.###...#..|#..##..||....#.||..#.|.|#.#..|..||"
	// "......|#|.#.#|.|....#..##|##|#...|.#.|.#....##|#.."
	// "#..||.....#....#....#.#.....|.....#....|....|...#."
	// ".#....#.##..........|.||.#.....#|#|||.#..#|......|"
	// "..||..|....#..........#.|...#|.|#.|#..|#||.#...|#|"
	// "..#..#.#|......#|.....||.#..##.|.#..#.||...|.|||.."
	// ".#....|....#.|#...#..||..||.##..#.||....|.#|....|."
	// "..#|.|.....#....#..|..||..#..##.|.||..||||#.#..|.|"
	// ".|#.|.||........#|.#|#....||..#||#...|..........##"
	// "..#|.|..|||..###..|||.#..#.#||||.#.|##...|#......|"
	// "..|...#|...|.#.#|.#...#.|..||##.#..#.|...#.#.#|#.."
	// "#..#..|##.#|......#...|#|##..#.|...#.#.....#..##.."
	// "..#.|..###|.|#.|........|.....|.....#..|.|.#...|.#"
	// "..#|.|#.#.|#..|....|#...|.....|........|.|##.|#||#"
	// "#.....##.#..#..#...|#||.#.#.#..|....|||.|.|......#"
	// "...#|#....|.#.#..##.|.....#....|.|||..##.|.#.|.##.";

	std::string map =
	"...|||......|||........#..|...|.......#||.||.#|.#|"
	"..##.|.||...||.|.#....||..|......|.#..#||.|#..|##."
	".|...|....|.|.##...|#...|...#...#.#|.#............"
	"|#.||.|..#.#..|...#..#..|.|..#...#..#...|##....|##"
	".|.........#.|.#.........|..#....|..##..##........"
	".#|##.||.........||||#..#|#|.||...|..|...#.||...#."
	"...|....#...|....|#.#.#..#..#.#....#|..|#...|.|..."
	".|....#|.|.#|###.|..|..|.#|.###|.##..|.#....|.||.."
	"|..|#.|..#.#...#|#....#...|..|......#|.#.|||..|#.#"
	"....##||..#....|.|...|###.#.|.|#.|..##.....||...|."
	"....#.#|..#|##..#........#.#....|......###|#|##.|#"
	"|..##.###.#.###.......|..|#|.|..|#.#....#|..|#..#|"
	"....##.#..###.......|.|.|..#..##....#|..|...#.|..."
	"..##...|..#.|....#.#.|###..|....|||.|.|.|....|#.#."
	"|..|#|....#|.#..#|.#..|.#..|#.|.|..|##|||.#.##.|.."
	".....#.|#|.|.#......#.#..#.#|...#.|.#|........#..."
	"|.#.#.#..|.|.#.|||..|..|##|.##...#.|...##|...#...."
	"..|.#..#....|..|.|.#.|#..|##.....|.....|....##..||"
	".|.#.#.#...||.|#...|........|..|#....#.|#..#|.|.|."
	"#..#.#............#.#.|.|#.||..|#....#.|.#|.##...."
	"|.....|#..#|.|...|.#||.#||.......#.||..|.||.####.."
	"#..#......#||.#..##...#.####..#|.#.|...|#.##|.#..|"
	"...|..#|.||.|###...##.......|....#.|.||.|#|#..#..#"
	"...#.#|...#|||...#|..||.#....|.|..#..|...#|.#...|."
	".#|..#.|||.|##|.|#.#....|..|.|.##.#.#|#..#.#|..||#"
	".#.|#.#..####...|.#|#..#.|...#|#.|.##.|...##..#.||"
	"...#..#|..##|.|#||...##||..|...##...|...|#.||..#.#"
	"|#.....|..#..#..|.|#|...|..#.#|...#............###"
	"||.|.|##.#|...|....#..|.|.|.#|...........|.....#|#"
	"|..#..#..#......|....|.|......|##|.#....##.|##.|||"
	"###.||.|.|.|..#..||....|...|..|....#..#|..|.||..|#"
	"....#.#|||..|#|.......#|....#........####|....##.|"
	"........|..|...#..|....#...|#.#..##|..|.#..#|.###."
	".#.##.#...##|.|#.#.|.....#...#..#|.#|#|.|......#|."
	".|.....###.||...#|.#.|||#|..#.|.|.#.#.##.##.|.|.|."
	"#.#|.||..|.#...##..||.##....#..........#...##.|..."
	".#....|..##..|.#.##|........#..#......#.....#|..##"
	".|#.#...|.|||....||...#|.|.#......#..###..|.#|.|.|"
	"##..#.|#.|.....||..##.||#|.#|#|#....#..|...|......"
	"..|......#.|.|.#..|........|.###||###....|.#.....|"
	"|..|#|..|...#...##|#|#.#|#|......||###...|.#||...."
	".........|.##|...#.#...##....|.....#...|#..|..#..#"
	"...#.#........#.|#..#..#|##|.....#.#.|#||...|#.|.."
	"...##..#|..........|.....|....|#.|..#...#|...#|.#."
	".|..#|..|.|.|||....|.#....|..||..#...|..#..|..##|."
	"....|.|...#...#..#.|.....#....|...#.|..........|.."
	"...#|#.||.#..|#.|.###|#|.#.......#...##.##|.|....|"
	"....##||.#...#..#...##|...||#.#..#|#......##||.|.."
	"..#.....##.......|##.|..||#......|..|||.#.......#."
	".....|#||#..|.#|..|..|....|........|.....##.#.#.|.";


	tfm::printfln("part 1: %d", run(map, 10));
	tfm::printfln("part 2: %d", run(map, 1000000000));
}


















